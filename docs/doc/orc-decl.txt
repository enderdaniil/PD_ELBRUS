<ENUM>
<NAME>OrcArmRegister</NAME>
typedef enum {
  ORC_ARM_A1 = ORC_GP_REG_BASE+0,
  ORC_ARM_A2,
  ORC_ARM_A3,
  ORC_ARM_A4,
  ORC_ARM_V1,
  ORC_ARM_V2,
  ORC_ARM_V3,
  ORC_ARM_V4,
  ORC_ARM_V5,
  ORC_ARM_V6,
  ORC_ARM_V7,
  ORC_ARM_V8,
  ORC_ARM_IP,
  ORC_ARM_SP,
  ORC_ARM_LR,
  ORC_ARM_PC
} OrcArmRegister;
</ENUM>
<ENUM>
<NAME>OrcArm64Register</NAME>
typedef enum {
  ORC_ARM64_R0 = ORC_GP_REG_BASE+0,
  ORC_ARM64_R1,
  ORC_ARM64_R2,
  ORC_ARM64_R3,
  ORC_ARM64_R4,
  ORC_ARM64_R5,
  ORC_ARM64_R6,
  ORC_ARM64_R7,
  ORC_ARM64_R8,
  ORC_ARM64_R9,
  ORC_ARM64_R10,
  ORC_ARM64_R11,
  ORC_ARM64_R12,
  ORC_ARM64_R13,
  ORC_ARM64_R14,
  ORC_ARM64_R15,
  ORC_ARM64_IP0,
  ORC_ARM64_IP1,
  ORC_ARM64_R18,
  ORC_ARM64_R19,
  ORC_ARM64_R20,
  ORC_ARM64_R21,
  ORC_ARM64_R22,
  ORC_ARM64_R23,
  ORC_ARM64_R24,
  ORC_ARM64_R25,
  ORC_ARM64_R26,
  ORC_ARM64_R27,
  ORC_ARM64_R28,
  ORC_ARM64_FP,
  ORC_ARM64_LR,
  ORC_ARM64_SP,
} OrcArm64Register;
</ENUM>
<ENUM>
<NAME>OrcArm64RegBits</NAME>
typedef enum {
  ORC_ARM64_REG_32 = 32,
  ORC_ARM64_REG_64 = 64
} OrcArm64RegBits;
</ENUM>
<ENUM>
<NAME>OrcArmDP</NAME>
typedef enum {
  ORC_ARM_DP_AND = 0,
  ORC_ARM_DP_EOR,
  ORC_ARM_DP_SUB,
  ORC_ARM_DP_RSB,
  ORC_ARM_DP_ADD,
  ORC_ARM_DP_ADC,
  ORC_ARM_DP_SBC,
  ORC_ARM_DP_RSC,
  ORC_ARM_DP_TST,
  ORC_ARM_DP_TEQ,
  ORC_ARM_DP_CMP,
  ORC_ARM_DP_CMN,
  ORC_ARM_DP_ORR,
  ORC_ARM_DP_MOV,
  ORC_ARM_DP_BIC,
  ORC_ARM_DP_MVN
} OrcArmDP;
</ENUM>
<ENUM>
<NAME>OrcArm64DP</NAME>
typedef enum {
  /** arithmetic */
  ORC_ARM64_DP_ADD = 0,
  ORC_ARM64_DP_ADDS, /** alias of CMN */
  ORC_ARM64_DP_SUB,
  ORC_ARM64_DP_SUBS, /** alias of CMP */
  /** logical */
  ORC_ARM64_DP_AND,
  ORC_ARM64_DP_ORR,  /** alias of MOV */
  ORC_ARM64_DP_EOR,
  ORC_ARM64_DP_ANDS, /** alias of TST */
  /** shift */
  ORC_ARM64_DP_LSL,
  ORC_ARM64_DP_LSR,
  ORC_ARM64_DP_ASR,
  ORC_ARM64_DP_ROR,
  /** bitfield */
  ORC_ARM64_DP_SBFM,
  ORC_ARM64_DP_BFM,
  ORC_ARM64_DP_UBFM,
  /** extract */
  ORC_ARM64_DP_EXTR
} OrcArm64DP;
</ENUM>
<ENUM>
<NAME>OrcArm64Mem</NAME>
typedef enum {
  ORC_ARM64_MEM_STR = 0,
  ORC_ARM64_MEM_LDR
} OrcArm64Mem;
</ENUM>
<ENUM>
<NAME>OrcArm64Type</NAME>
typedef enum {
  ORC_ARM64_TYPE_IMM = 0,
  ORC_ARM64_TYPE_REG,
  ORC_ARM64_TYPE_EXT
} OrcArm64Type;
</ENUM>
<ENUM>
<NAME>OrcArm64Extend</NAME>
typedef enum {
  ORC_ARM64_UXTB,
  ORC_ARM64_UXTH,
  ORC_ARM64_UXTW,
  ORC_ARM64_UXTX,
  ORC_ARM64_SXTB,
  ORC_ARM64_SXTH,
  ORC_ARM64_SXTW,
  ORC_ARM64_SXTX,
} OrcArm64Extend;
</ENUM>
<ENUM>
<NAME>OrcArmCond</NAME>
typedef enum {
  ORC_ARM_COND_EQ = 0,
  ORC_ARM_COND_NE,
  ORC_ARM_COND_CS,
  ORC_ARM_COND_CC,
  ORC_ARM_COND_MI,
  ORC_ARM_COND_PL,
  ORC_ARM_COND_VS,
  ORC_ARM_COND_VC,
  ORC_ARM_COND_HI,
  ORC_ARM_COND_LS,
  ORC_ARM_COND_GE,
  ORC_ARM_COND_LT,
  ORC_ARM_COND_GT,
  ORC_ARM_COND_LE,
  ORC_ARM_COND_AL,
} OrcArmCond;
</ENUM>
<ENUM>
<NAME>OrcArmShift</NAME>
typedef enum {
  ORC_ARM_LSL,
  ORC_ARM_LSR,
  ORC_ARM_ASR,
  ORC_ARM_ROR
} OrcArmShift;
</ENUM>
<MACRO>
<NAME>orc_arm_emit_and_i</NAME>
#define orc_arm_emit_and_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_AND,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_eor_i</NAME>
#define orc_arm_emit_eor_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_EOR,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sub_i</NAME>
#define orc_arm_emit_sub_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_SUB,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsb_i</NAME>
#define orc_arm_emit_rsb_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_RSB,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_add_i</NAME>
#define orc_arm_emit_add_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_ADD,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_adc_i</NAME>
#define orc_arm_emit_adc_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_ADC,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sbc_i</NAME>
#define orc_arm_emit_sbc_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_SBC,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsc_i</NAME>
#define orc_arm_emit_rsc_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_RSC,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_tst_i</NAME>
#define orc_arm_emit_tst_i(p,cond,Rn,imm)             orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_TST,1, 0,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_teq_i</NAME>
#define orc_arm_emit_teq_i(p,cond,Rn,imm)             orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_TEQ,1, 0,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmp_i</NAME>
#define orc_arm_emit_cmp_i(p,cond,Rn,imm)             orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_CMP,1, 0,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmn_i</NAME>
#define orc_arm_emit_cmn_i(p,cond,Rn,imm)             orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_CMN,1, 0,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_orr_i</NAME>
#define orc_arm_emit_orr_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_ORR,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mov_i</NAME>
#define orc_arm_emit_mov_i(p,cond,S,Rd,imm)           orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_MOV,S,Rd, 0,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_bic_i</NAME>
#define orc_arm_emit_bic_i(p,cond,S,Rd,Rn,imm)        orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_BIC,S,Rd,Rn,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mvn_i</NAME>
#define orc_arm_emit_mvn_i(p,cond,S,Rd,imm)           orc_arm_emit_dp(p,0,cond,ORC_ARM_DP_MVN,S,Rd, 0,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_and_r</NAME>
#define orc_arm_emit_and_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_AND,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_eor_r</NAME>
#define orc_arm_emit_eor_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_EOR,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sub_r</NAME>
#define orc_arm_emit_sub_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_SUB,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsb_r</NAME>
#define orc_arm_emit_rsb_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_RSB,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_add_r</NAME>
#define orc_arm_emit_add_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_ADD,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_adc_r</NAME>
#define orc_arm_emit_adc_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_ADC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sbc_r</NAME>
#define orc_arm_emit_sbc_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_SBC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsc_r</NAME>
#define orc_arm_emit_rsc_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_RSC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_tst_r</NAME>
#define orc_arm_emit_tst_r(p,cond,Rn,Rm)              orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_TST,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_teq_r</NAME>
#define orc_arm_emit_teq_r(p,cond,Rn,Rm)              orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_TEQ,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmp_r</NAME>
#define orc_arm_emit_cmp_r(p,cond,Rn,Rm)              orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_CMP,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmn_r</NAME>
#define orc_arm_emit_cmn_r(p,cond,Rn,Rm)              orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_CMN,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_orr_r</NAME>
#define orc_arm_emit_orr_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_ORR,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mov_r</NAME>
#define orc_arm_emit_mov_r(p,cond,S,Rd,Rm)            orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_MOV,S,Rd, 0,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_bic_r</NAME>
#define orc_arm_emit_bic_r(p,cond,S,Rd,Rn,Rm)         orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_BIC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mvn_r</NAME>
#define orc_arm_emit_mvn_r(p,cond,S,Rd,Rm)            orc_arm_emit_dp(p,1,cond,ORC_ARM_DP_MVN,S,Rd, 0,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_and_rsi</NAME>
#define orc_arm_emit_and_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_AND,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_eor_rsi</NAME>
#define orc_arm_emit_eor_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_EOR,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sub_rsi</NAME>
#define orc_arm_emit_sub_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_SUB,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsb_rsi</NAME>
#define orc_arm_emit_rsb_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_RSB,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_add_rsi</NAME>
#define orc_arm_emit_add_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_ADD,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_adc_rsi</NAME>
#define orc_arm_emit_adc_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_ADC,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sbc_rsi</NAME>
#define orc_arm_emit_sbc_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_SBC,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsc_rsi</NAME>
#define orc_arm_emit_rsc_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_RSC,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_tst_rsi</NAME>
#define orc_arm_emit_tst_rsi(p,cond,Rn,Rm,sh,im)      orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_TST,1, 0,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_teq_rsi</NAME>
#define orc_arm_emit_teq_rsi(p,cond,Rn,Rm,sh,im)      orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_TEQ,1, 0,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmp_rsi</NAME>
#define orc_arm_emit_cmp_rsi(p,cond,Rn,Rm,sh,im)      orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_CMP,1, 0,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmn_rsi</NAME>
#define orc_arm_emit_cmn_rsi(p,cond,Rn,Rm,sh,im)      orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_CMN,1, 0,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_orr_rsi</NAME>
#define orc_arm_emit_orr_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_ORR,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mov_rsi</NAME>
#define orc_arm_emit_mov_rsi(p,cond,S,Rd,Rm,sh,im)    orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_MOV,S,Rd, 0,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_bic_rsi</NAME>
#define orc_arm_emit_bic_rsi(p,cond,S,Rd,Rn,Rm,sh,im) orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_BIC,S,Rd,Rn,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mvn_rsi</NAME>
#define orc_arm_emit_mvn_rsi(p,cond,S,Rd,Rm,sh,im)    orc_arm_emit_dp(p,2,cond,ORC_ARM_DP_MVN,S,Rd, 0,Rm,sh,im)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_and_rsr</NAME>
#define orc_arm_emit_and_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_AND,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_eor_rsr</NAME>
#define orc_arm_emit_eor_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_EOR,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sub_rsr</NAME>
#define orc_arm_emit_sub_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_SUB,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsb_rsr</NAME>
#define orc_arm_emit_rsb_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_RSB,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_add_rsr</NAME>
#define orc_arm_emit_add_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_ADD,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_adc_rsr</NAME>
#define orc_arm_emit_adc_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_ADC,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sbc_rsr</NAME>
#define orc_arm_emit_sbc_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_SBC,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsc_rsr</NAME>
#define orc_arm_emit_rsc_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_RSC,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_tst_rsr</NAME>
#define orc_arm_emit_tst_rsr(p,cond,Rn,Rm,sh,Rs)      orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_TST,1, 0,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_teq_rsr</NAME>
#define orc_arm_emit_teq_rsr(p,cond,Rn,Rm,sh,Rs)      orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_TEQ,1, 0,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmp_rsr</NAME>
#define orc_arm_emit_cmp_rsr(p,cond,Rn,Rm,sh,Rs)      orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_CMP,1, 0,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmn_rsr</NAME>
#define orc_arm_emit_cmn_rsr(p,cond,Rn,Rm,sh,Rs)      orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_CMN,1, 0,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_orr_rsr</NAME>
#define orc_arm_emit_orr_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_ORR,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mov_rsr</NAME>
#define orc_arm_emit_mov_rsr(p,cond,S,Rd,Rm,sh,Rs)    orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_MOV,S,Rd, 0,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_bic_rsr</NAME>
#define orc_arm_emit_bic_rsr(p,cond,S,Rd,Rn,Rm,sh,Rs) orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_BIC,S,Rd,Rn,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mvn_rsr</NAME>
#define orc_arm_emit_mvn_rsr(p,cond,S,Rd,Rm,sh,Rs)    orc_arm_emit_dp(p,3,cond,ORC_ARM_DP_MVN,S,Rd, 0,Rm,sh,Rs)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_and_rrx</NAME>
#define orc_arm_emit_and_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_AND,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_eor_rrx</NAME>
#define orc_arm_emit_eor_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_EOR,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sub_rrx</NAME>
#define orc_arm_emit_sub_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_SUB,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsb_rrx</NAME>
#define orc_arm_emit_rsb_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_RSB,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_add_rrx</NAME>
#define orc_arm_emit_add_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_ADD,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_adc_rrx</NAME>
#define orc_arm_emit_adc_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_ADC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sbc_rrx</NAME>
#define orc_arm_emit_sbc_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_SBC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rsc_rrx</NAME>
#define orc_arm_emit_rsc_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_RSC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_tst_rrx</NAME>
#define orc_arm_emit_tst_rrx(p,cond,Rn,Rm)            orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_TST,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_teq_rrx</NAME>
#define orc_arm_emit_teq_rrx(p,cond,Rn,Rm)            orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_TEQ,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmp_rrx</NAME>
#define orc_arm_emit_cmp_rrx(p,cond,Rn,Rm)            orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_CMP,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_cmn_rrx</NAME>
#define orc_arm_emit_cmn_rrx(p,cond,Rn,Rm)            orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_CMN,1, 0,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_orr_rrx</NAME>
#define orc_arm_emit_orr_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_ORR,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mov_rrx</NAME>
#define orc_arm_emit_mov_rrx(p,cond,S,Rd,Rm)          orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_MOV,S,Rd, 0,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_bic_rrx</NAME>
#define orc_arm_emit_bic_rrx(p,cond,S,Rd,Rn,Rm)       orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_BIC,S,Rd,Rn,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_mvn_rrx</NAME>
#define orc_arm_emit_mvn_rrx(p,cond,S,Rd,Rm)          orc_arm_emit_dp(p,4,cond,ORC_ARM_DP_MVN,S,Rd, 0,Rm,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sadd16</NAME>
#define orc_arm_emit_sadd16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,0,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qadd16</NAME>
#define orc_arm_emit_qadd16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,0,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shadd16</NAME>
#define orc_arm_emit_shadd16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,0,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uadd16</NAME>
#define orc_arm_emit_uadd16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,0,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqadd16</NAME>
#define orc_arm_emit_uqadd16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,0,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhadd16</NAME>
#define orc_arm_emit_uhadd16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,0,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_saddsubx</NAME>
#define orc_arm_emit_saddsubx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,1,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qaddsubx</NAME>
#define orc_arm_emit_qaddsubx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,1,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shaddsubx</NAME>
#define orc_arm_emit_shaddsubx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,1,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uaddsubx</NAME>
#define orc_arm_emit_uaddsubx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,1,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqaddsubx</NAME>
#define orc_arm_emit_uqaddsubx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,1,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhaddsubx</NAME>
#define orc_arm_emit_uhaddsubx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,1,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssubaddx</NAME>
#define orc_arm_emit_ssubaddx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,2,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qsubaddx</NAME>
#define orc_arm_emit_qsubaddx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,2,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shsubaddx</NAME>
#define orc_arm_emit_shsubaddx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,2,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usubaddx</NAME>
#define orc_arm_emit_usubaddx(p,cond,Rd,Rn,Rm)        orc_arm_emit_par(p,2,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqsubaddx</NAME>
#define orc_arm_emit_uqsubaddx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,2,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhsubaddx</NAME>
#define orc_arm_emit_uhsubaddx(p,cond,Rd,Rn,Rm)       orc_arm_emit_par(p,2,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssub16</NAME>
#define orc_arm_emit_ssub16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,3,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qsub16</NAME>
#define orc_arm_emit_qsub16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,3,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shsub16</NAME>
#define orc_arm_emit_shsub16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,3,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usub16</NAME>
#define orc_arm_emit_usub16(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,3,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqsub16</NAME>
#define orc_arm_emit_uqsub16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,3,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhsub16</NAME>
#define orc_arm_emit_uhsub16(p,cond,Rd,Rn,Rm)         orc_arm_emit_par(p,3,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sadd8</NAME>
#define orc_arm_emit_sadd8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,4,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qadd8</NAME>
#define orc_arm_emit_qadd8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,4,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shadd8</NAME>
#define orc_arm_emit_shadd8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,4,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uadd8</NAME>
#define orc_arm_emit_uadd8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,4,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqadd8</NAME>
#define orc_arm_emit_uqadd8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,4,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhadd8</NAME>
#define orc_arm_emit_uhadd8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,4,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssub8</NAME>
#define orc_arm_emit_ssub8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,5,0,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qsub8</NAME>
#define orc_arm_emit_qsub8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,5,1,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_shsub8</NAME>
#define orc_arm_emit_shsub8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,5,2,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usub8</NAME>
#define orc_arm_emit_usub8(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,5,3,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uqsub8</NAME>
#define orc_arm_emit_uqsub8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,5,4,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uhsub8</NAME>
#define orc_arm_emit_uhsub8(p,cond,Rd,Rn,Rm)          orc_arm_emit_par(p,5,5,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sel</NAME>
#define orc_arm_emit_sel(p,cond,Rd,Rn,Rm)             orc_arm_emit_par(p,6,6,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qadd</NAME>
#define orc_arm_emit_qadd(p,cond,Rd,Rn,Rm)            orc_arm_emit_par(p,7,7, cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qsub</NAME>
#define orc_arm_emit_qsub(p,cond,Rd,Rn,Rm)            orc_arm_emit_par(p,8,8, cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qdadd</NAME>
#define orc_arm_emit_qdadd(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,7,9, cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_qdsub</NAME>
#define orc_arm_emit_qdsub(p,cond,Rd,Rn,Rm)           orc_arm_emit_par(p,8,10,cond,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtb16_r8</NAME>
#define orc_arm_emit_sxtb16_r8(p,cond,Rd,Rm,r8)       orc_arm_emit_xt(p,0, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtb_r8</NAME>
#define orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,r8)         orc_arm_emit_xt(p,1, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxth_r8</NAME>
#define orc_arm_emit_sxth_r8(p,cond,Rd,Rm,r8)         orc_arm_emit_xt(p,2, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtb16_r8</NAME>
#define orc_arm_emit_uxtb16_r8(p,cond,Rd,Rm,r8)       orc_arm_emit_xt(p,3, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtb_r8</NAME>
#define orc_arm_emit_uxtb_r8(p,cond,Rd,Rm,r8)         orc_arm_emit_xt(p,4, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxth_r8</NAME>
#define orc_arm_emit_uxth_r8(p,cond,Rd,Rm,r8)         orc_arm_emit_xt(p,5, cond,Rd,15,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtab16_r8</NAME>
#define orc_arm_emit_sxtab16_r8(p,cond,Rd,Rn,Rm,r8)   orc_arm_emit_xt(p,6, cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtab_r8</NAME>
#define orc_arm_emit_sxtab_r8(p,cond,Rd,Rn,Rm,r8)     orc_arm_emit_xt(p,7, cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtah_r8</NAME>
#define orc_arm_emit_sxtah_r8(p,cond,Rd,Rn,Rm,r8)     orc_arm_emit_xt(p,8, cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtab16_r8</NAME>
#define orc_arm_emit_uxtab16_r8(p,cond,Rd,Rn,Rm,r8)   orc_arm_emit_xt(p,9, cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtab_r8</NAME>
#define orc_arm_emit_uxtab_r8(p,cond,Rd,Rn,Rm,r8)     orc_arm_emit_xt(p,10,cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtah_r8</NAME>
#define orc_arm_emit_uxtah_r8(p,cond,Rd,Rn,Rm,r8)     orc_arm_emit_xt(p,11,cond,Rd,Rn,Rm,r8)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtb16</NAME>
#define orc_arm_emit_sxtb16(p,cond,Rd,Rm)             orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtb</NAME>
#define orc_arm_emit_sxtb(p,cond,Rd,Rm)               orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxth</NAME>
#define orc_arm_emit_sxth(p,cond,Rd,Rm)               orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtb16</NAME>
#define orc_arm_emit_uxtb16(p,cond,Rd,Rm)             orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtb</NAME>
#define orc_arm_emit_uxtb(p,cond,Rd,Rm)               orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxth</NAME>
#define orc_arm_emit_uxth(p,cond,Rd,Rm)               orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtab16</NAME>
#define orc_arm_emit_sxtab16(p,cond,Rd,Rn,Rm)         orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtab</NAME>
#define orc_arm_emit_sxtab(p,cond,Rd,Rn,Rm)           orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_sxtah</NAME>
#define orc_arm_emit_sxtah(p,cond,Rd,Rn,Rm)           orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtab16</NAME>
#define orc_arm_emit_uxtab16(p,cond,Rd,Rn,Rm)         orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtab</NAME>
#define orc_arm_emit_uxtab(p,cond,Rd,Rn,Rm)           orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_uxtah</NAME>
#define orc_arm_emit_uxtah(p,cond,Rd,Rn,Rm)           orc_arm_emit_sxtb_r8(p,cond,Rd,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_pkhbt</NAME>
#define orc_arm_emit_pkhbt(p,cond,Rd,Rn,Rm)           orc_arm_emit_pkh(p,0,cond,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_pkhtb</NAME>
#define orc_arm_emit_pkhtb(p,cond,Rd,Rn,Rm)           orc_arm_emit_pkh(p,1,cond,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_pkhbt_s</NAME>
#define orc_arm_emit_pkhbt_s(p,cond,Rd,Rn,Rm,lsl)     orc_arm_emit_pkh(p,0,cond,Rd,Rn,Rm,lsl)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_pkhtb_s</NAME>
#define orc_arm_emit_pkhtb_s(p,cond,Rd,Rn,Rm,asr)     orc_arm_emit_pkh(p,1,cond,Rd,Rn,Rm,asr)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssat</NAME>
#define orc_arm_emit_ssat(p,cond,Rd,sat,Rm)           orc_arm_emit_sat(p,0,cond,Rd,sat,Rm,0, 0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usat</NAME>
#define orc_arm_emit_usat(p,cond,Rd,sat,Rm)           orc_arm_emit_sat(p,1,cond,Rd,sat,Rm,0, 0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssat_lsl</NAME>
#define orc_arm_emit_ssat_lsl(p,cond,Rd,sat,Rm,sh)    orc_arm_emit_sat(p,0,cond,Rd,sat,Rm,sh,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usat_lsl</NAME>
#define orc_arm_emit_usat_lsl(p,cond,Rd,sat,Rm,sh)    orc_arm_emit_sat(p,1,cond,Rd,sat,Rm,sh,0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssat_asr</NAME>
#define orc_arm_emit_ssat_asr(p,cond,Rd,sat,Rm,sh)    orc_arm_emit_sat(p,0,cond,Rd,sat,Rm,sh,1)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usat_asr</NAME>
#define orc_arm_emit_usat_asr(p,cond,Rd,sat,Rm,sh)    orc_arm_emit_sat(p,1,cond,Rd,sat,Rm,sh,1)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_ssat16</NAME>
#define orc_arm_emit_ssat16(p,cond,Rd,sat,Rm)         orc_arm_emit_sat(p,2,cond,Rd,sat,Rm,0, 0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_usat16</NAME>
#define orc_arm_emit_usat16(p,cond,Rd,sat,Rm)         orc_arm_emit_sat(p,3,cond,Rd,sat,Rm,0, 0)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rev</NAME>
#define orc_arm_emit_rev(p,cond,Rd,Rm)                orc_arm_emit_rv (p,0,cond,Rd,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm_emit_rev16</NAME>
#define orc_arm_emit_rev16(p,cond,Rd,Rm)              orc_arm_emit_rv (p,1,cond,Rd,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_imm</NAME>
#define orc_arm64_emit_add_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add</NAME>
#define orc_arm64_emit_add(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_lsl</NAME>
#define orc_arm64_emit_add_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_lsr</NAME>
#define orc_arm64_emit_add_lsr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_REG,ORC_ARM_LSR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_asr</NAME>
#define orc_arm64_emit_add_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_ror</NAME>
#define orc_arm64_emit_add_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_uxtb</NAME>
#define orc_arm64_emit_add_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_uxth</NAME>
#define orc_arm64_emit_add_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_uxtw</NAME>
#define orc_arm64_emit_add_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_uxtx</NAME>
#define orc_arm64_emit_add_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_sxtb</NAME>
#define orc_arm64_emit_add_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_sxth</NAME>
#define orc_arm64_emit_add_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_sxtw</NAME>
#define orc_arm64_emit_add_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_add_sxtx</NAME>
#define orc_arm64_emit_add_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADD,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_imm</NAME>
#define orc_arm64_emit_adds_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds</NAME>
#define orc_arm64_emit_adds(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_lsl</NAME>
#define orc_arm64_emit_adds_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_asr</NAME>
#define orc_arm64_emit_adds_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_ror</NAME>
#define orc_arm64_emit_adds_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_uxtb</NAME>
#define orc_arm64_emit_adds_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_uxth</NAME>
#define orc_arm64_emit_adds_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_uxtw</NAME>
#define orc_arm64_emit_adds_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_uxtx</NAME>
#define orc_arm64_emit_adds_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_sxtb</NAME>
#define orc_arm64_emit_adds_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_sxth</NAME>
#define orc_arm64_emit_adds_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_sxtw</NAME>
#define orc_arm64_emit_adds_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_adds_sxtx</NAME>
#define orc_arm64_emit_adds_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_imm</NAME>
#define orc_arm64_emit_cmn_imm(p,bits,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_IMM,0,0,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn</NAME>
#define orc_arm64_emit_cmn(p,bits,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,0,0,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_lsl</NAME>
#define orc_arm64_emit_cmn_lsl(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_asr</NAME>
#define orc_arm64_emit_cmn_asr(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_ror</NAME>
#define orc_arm64_emit_cmn_ror(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_uxtb</NAME>
#define orc_arm64_emit_cmn_uxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_uxth</NAME>
#define orc_arm64_emit_cmn_uxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_uxtw</NAME>
#define orc_arm64_emit_cmn_uxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_uxtx</NAME>
#define orc_arm64_emit_cmn_uxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_sxtb</NAME>
#define orc_arm64_emit_cmn_sxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_sxth</NAME>
#define orc_arm64_emit_cmn_sxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_sxtw</NAME>
#define orc_arm64_emit_cmn_sxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmn_sxtx</NAME>
#define orc_arm64_emit_cmn_sxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_ADDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_imm</NAME>
#define orc_arm64_emit_sub_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub</NAME>
#define orc_arm64_emit_sub(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_lsl</NAME>
#define orc_arm64_emit_sub_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_asr</NAME>
#define orc_arm64_emit_sub_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_ror</NAME>
#define orc_arm64_emit_sub_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_uxtb</NAME>
#define orc_arm64_emit_sub_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_uxth</NAME>
#define orc_arm64_emit_sub_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_uxtw</NAME>
#define orc_arm64_emit_sub_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_uxtx</NAME>
#define orc_arm64_emit_sub_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_sxtb</NAME>
#define orc_arm64_emit_sub_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_sxth</NAME>
#define orc_arm64_emit_sub_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_sxtw</NAME>
#define orc_arm64_emit_sub_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_sub_sxtx</NAME>
#define orc_arm64_emit_sub_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUB,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_imm</NAME>
#define orc_arm64_emit_subs_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs</NAME>
#define orc_arm64_emit_subs(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_lsl</NAME>
#define orc_arm64_emit_subs_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_asr</NAME>
#define orc_arm64_emit_subs_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_ror</NAME>
#define orc_arm64_emit_subs_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_uxtb</NAME>
#define orc_arm64_emit_subs_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_uxth</NAME>
#define orc_arm64_emit_subs_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_uxtw</NAME>
#define orc_arm64_emit_subs_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_uxtx</NAME>
#define orc_arm64_emit_subs_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_sxtb</NAME>
#define orc_arm64_emit_subs_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_sxth</NAME>
#define orc_arm64_emit_subs_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_sxtw</NAME>
#define orc_arm64_emit_subs_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_subs_sxtx</NAME>
#define orc_arm64_emit_subs_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_imm</NAME>
#define orc_arm64_emit_cmp_imm(p,bits,Rn,imm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_IMM,0,0,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp</NAME>
#define orc_arm64_emit_cmp(p,bits,Rn,Rm) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,0,0,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_lsl</NAME>
#define orc_arm64_emit_cmp_lsl(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_asr</NAME>
#define orc_arm64_emit_cmp_asr(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_ror</NAME>
#define orc_arm64_emit_cmp_ror(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_uxtb</NAME>
#define orc_arm64_emit_cmp_uxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_uxth</NAME>
#define orc_arm64_emit_cmp_uxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_uxtw</NAME>
#define orc_arm64_emit_cmp_uxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_uxtx</NAME>
#define orc_arm64_emit_cmp_uxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_sxtb</NAME>
#define orc_arm64_emit_cmp_sxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_sxth</NAME>
#define orc_arm64_emit_cmp_sxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_sxtw</NAME>
#define orc_arm64_emit_cmp_sxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_cmp_sxtx</NAME>
#define orc_arm64_emit_cmp_sxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_am(p,bits,ORC_ARM64_DP_SUBS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_imm</NAME>
#define orc_arm64_emit_and_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and</NAME>
#define orc_arm64_emit_and(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_REG,0,Rd,Rn,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_lsl</NAME>
#define orc_arm64_emit_and_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_asr</NAME>
#define orc_arm64_emit_and_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_ror</NAME>
#define orc_arm64_emit_and_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_uxtb</NAME>
#define orc_arm64_emit_and_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_uxth</NAME>
#define orc_arm64_emit_and_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_uxtw</NAME>
#define orc_arm64_emit_and_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_uxtx</NAME>
#define orc_arm64_emit_and_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_sxtb</NAME>
#define orc_arm64_emit_and_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_sxth</NAME>
#define orc_arm64_emit_and_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_sxtw</NAME>
#define orc_arm64_emit_and_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_and_sxtx</NAME>
#define orc_arm64_emit_and_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_AND,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_imm</NAME>
#define orc_arm64_emit_orr_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr</NAME>
#define orc_arm64_emit_orr(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_lsl</NAME>
#define orc_arm64_emit_orr_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_asr</NAME>
#define orc_arm64_emit_orr_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_ror</NAME>
#define orc_arm64_emit_orr_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_uxtb</NAME>
#define orc_arm64_emit_orr_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_uxth</NAME>
#define orc_arm64_emit_orr_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_uxtw</NAME>
#define orc_arm64_emit_orr_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_uxtx</NAME>
#define orc_arm64_emit_orr_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_sxtb</NAME>
#define orc_arm64_emit_orr_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_sxth</NAME>
#define orc_arm64_emit_orr_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_sxtw</NAME>
#define orc_arm64_emit_orr_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_orr_sxtx</NAME>
#define orc_arm64_emit_orr_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_mov_imm</NAME>
#define orc_arm64_emit_mov_imm(p,bits,Rd,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_IMM,0,Rd,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_mov_uimm</NAME>
#define orc_arm64_emit_mov_uimm(p,bits,Rd,imm) \
  orc_arm64_emit_movz(p,bits,0,Rd,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_movn</NAME>
#define orc_arm64_emit_movn(p,bits,shift,Rd,imm) \
  orc_arm64_emit_mov_wide(p,bits,0,shift,Rd,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_movz</NAME>
#define orc_arm64_emit_movz(p,bits,shift,Rd,imm) \
  orc_arm64_emit_mov_wide(p,bits,2,shift,Rd,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_movk</NAME>
#define orc_arm64_emit_movk(p,bits,shift,Rd,imm) \
  orc_arm64_emit_mov_wide(p,bits,3,shift,Rd,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_mov</NAME>
#define orc_arm64_emit_mov(p,bits,Rd,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ORR,ORC_ARM64_TYPE_REG,0,Rd,0,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_imm</NAME>
#define orc_arm64_emit_eor_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor</NAME>
#define orc_arm64_emit_eor(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_lsl</NAME>
#define orc_arm64_emit_eor_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_asr</NAME>
#define orc_arm64_emit_eor_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_ror</NAME>
#define orc_arm64_emit_eor_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_uxtb</NAME>
#define orc_arm64_emit_eor_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_uxth</NAME>
#define orc_arm64_emit_eor_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_uxtw</NAME>
#define orc_arm64_emit_eor_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_uxtx</NAME>
#define orc_arm64_emit_eor_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_sxtb</NAME>
#define orc_arm64_emit_eor_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_sxth</NAME>
#define orc_arm64_emit_eor_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_sxtw</NAME>
#define orc_arm64_emit_eor_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_eor_sxtx</NAME>
#define orc_arm64_emit_eor_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_EOR,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_imm</NAME>
#define orc_arm64_emit_ands_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_IMM,0,Rd,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands</NAME>
#define orc_arm64_emit_ands(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,0,Rd,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_lsl</NAME>
#define orc_arm64_emit_ands_lsl(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_asr</NAME>
#define orc_arm64_emit_ands_asr(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_ror</NAME>
#define orc_arm64_emit_ands_ror(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_uxtb</NAME>
#define orc_arm64_emit_ands_uxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_uxth</NAME>
#define orc_arm64_emit_ands_uxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_uxtw</NAME>
#define orc_arm64_emit_ands_uxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_uxtx</NAME>
#define orc_arm64_emit_ands_uxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_sxtb</NAME>
#define orc_arm64_emit_ands_sxtb(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_sxth</NAME>
#define orc_arm64_emit_ands_sxth(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_sxtw</NAME>
#define orc_arm64_emit_ands_sxtw(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ands_sxtx</NAME>
#define orc_arm64_emit_ands_sxtx(p,bits,Rd,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,Rd,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_imm</NAME>
#define orc_arm64_emit_tst_imm(p,bits,Rn,imm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_IMM,0,0,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst</NAME>
#define orc_arm64_emit_tst(p,bits,Rn,Rm) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,0,0,Rn,Rm,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_lsl</NAME>
#define orc_arm64_emit_tst_lsl(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_LSL,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_asr</NAME>
#define orc_arm64_emit_tst_asr(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_ASR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_ror</NAME>
#define orc_arm64_emit_tst_ror(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_REG,ORC_ARM_ROR,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_uxtb</NAME>
#define orc_arm64_emit_tst_uxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_uxth</NAME>
#define orc_arm64_emit_tst_uxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_uxtw</NAME>
#define orc_arm64_emit_tst_uxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_uxtx</NAME>
#define orc_arm64_emit_tst_uxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_UXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_sxtb</NAME>
#define orc_arm64_emit_tst_sxtb(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTB,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_sxth</NAME>
#define orc_arm64_emit_tst_sxth(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTH,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_sxtw</NAME>
#define orc_arm64_emit_tst_sxtw(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTW,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_tst_sxtx</NAME>
#define orc_arm64_emit_tst_sxtx(p,bits,Rn,Rm,val) \
  orc_arm64_emit_lg(p,bits,ORC_ARM64_DP_ANDS,ORC_ARM64_TYPE_EXT,ORC_ARM64_SXTX,0,Rn,Rm,val)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_lsl_imm</NAME>
#define orc_arm64_emit_lsl_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_bfm(p,bits,ORC_ARM64_DP_UBFM,Rd,Rn,imm,imm-1)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_lsr_imm</NAME>
#define orc_arm64_emit_lsr_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_bfm(p,bits,ORC_ARM64_DP_UBFM,Rd,Rn,imm,0x1f)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_asr_imm</NAME>
#define orc_arm64_emit_asr_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_bfm(p,bits,ORC_ARM64_DP_SBFM,Rd,Rn,imm,0x1f)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ror_imm</NAME>
#define orc_arm64_emit_ror_imm(p,bits,Rd,Rn,imm) \
  orc_arm64_emit_extr(p,bits,Rd,Rn,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_lsl</NAME>
#define orc_arm64_emit_lsl(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_sft(p,bits,ORC_ARM64_DP_LSL,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_lsr</NAME>
#define orc_arm64_emit_lsr(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_sft(p,bits,ORC_ARM64_DP_LSR,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_asr</NAME>
#define orc_arm64_emit_asr(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_sft(p,bits,ORC_ARM64_DP_ASR,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_ror</NAME>
#define orc_arm64_emit_ror(p,bits,Rd,Rn,Rm) \
  orc_arm64_emit_sft(p,bits,ORC_ARM64_DP_ROR,Rd,Rn,Rm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_reg</NAME>
#define orc_arm64_emit_store_reg(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_REG,0,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_pre</NAME>
#define orc_arm64_emit_store_pre(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_REG,1,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_post</NAME>
#define orc_arm64_emit_store_post(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_REG,2,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_uxtw</NAME>
#define orc_arm64_emit_store_uxtw(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_UXTW,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_lsl</NAME>
#define orc_arm64_emit_store_lsl(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_UXTX,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_sxtw</NAME>
#define orc_arm64_emit_store_sxtw(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_SXTW,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_sxtx</NAME>
#define orc_arm64_emit_store_sxtx(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_STR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_SXTX,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_imm</NAME>
#define orc_arm64_emit_load_imm(p,b,Rt,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_IMM,0,Rt,0,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_label</NAME>
#define orc_arm64_emit_load_label(p,b,Rt,label) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_IMM,label,Rt,0,0,0)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_reg</NAME>
#define orc_arm64_emit_load_reg(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_REG,0,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_pre</NAME>
#define orc_arm64_emit_load_pre(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_REG,1,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_post</NAME>
#define orc_arm64_emit_load_post(p,b,Rt,Rn,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_REG,2,Rt,Rn,0,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_uxtw</NAME>
#define orc_arm64_emit_load_uxtw(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_UXTW,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_lsl</NAME>
#define orc_arm64_emit_load_lsl(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_UXTX,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_sxtw</NAME>
#define orc_arm64_emit_load_sxtw(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_SXTW,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_sxtx</NAME>
#define orc_arm64_emit_load_sxtx(p,b,Rt,Rn,Rm,imm) \
  orc_arm64_emit_mem(p,b,ORC_ARM64_MEM_LDR,ORC_ARM64_TYPE_EXT,ORC_ARM64_EXTEND_SXTX,Rt,Rn,Rm,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_pair_reg</NAME>
#define orc_arm64_emit_store_pair_reg(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_STR,2,Rt,Rt2,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_pair_pre</NAME>
#define orc_arm64_emit_store_pair_pre(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_STR,3,Rt,Rt2,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_store_pair_post</NAME>
#define orc_arm64_emit_store_pair_post(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_STR,1,Rt,Rt2,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_pair_reg</NAME>
#define orc_arm64_emit_load_pair_reg(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_LDR,2,Rt,Rt2,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_pair_pre</NAME>
#define orc_arm64_emit_load_pair_pre(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_LDR,3,Rt,Rt2,Rn,imm)
</MACRO>
<MACRO>
<NAME>orc_arm64_emit_load_pair_post</NAME>
#define orc_arm64_emit_load_pair_post(p,b,Rt,Rt2,Rn,imm) \
  orc_arm64_emit_mem_pair(p,b,ORC_ARM64_MEM_LDR,1,Rt,Rt2,Rn,imm)
</MACRO>
<STRUCT>
<NAME>OrcBytecode</NAME>
struct _OrcBytecode {
  /*< private >*/
  orc_uint8 *bytecode;
  int length;
  int alloc_len;
};
</STRUCT>
<ENUM>
<NAME>OrcBytecodes</NAME>
typedef enum {
  ORC_BC_END,
  ORC_BC_BEGIN_FUNCTION,
  ORC_BC_END_FUNCTION,
  ORC_BC_SET_CONSTANT_N,
  ORC_BC_SET_N_MULTIPLE,
  ORC_BC_SET_N_MINIMUM,
  ORC_BC_SET_N_MAXIMUM,
  ORC_BC_SET_2D,
  ORC_BC_SET_CONSTANT_M,
  ORC_BC_SET_NAME,
  ORC_BC_SET_BACKUP_FUNCTION,
  ORC_BC_ADD_DESTINATION,
  ORC_BC_ADD_SOURCE,
  ORC_BC_ADD_ACCUMULATOR,
  ORC_BC_ADD_CONSTANT,
  ORC_BC_ADD_CONSTANT_INT64,
  ORC_BC_ADD_PARAMETER,
  ORC_BC_ADD_PARAMETER_FLOAT,
  ORC_BC_ADD_PARAMETER_INT64,
  ORC_BC_ADD_PARAMETER_DOUBLE,
  ORC_BC_ADD_TEMPORARY,
  ORC_BC_INSTRUCTION_FLAGS,
  ORC_BC_RESERVED_22,
  ORC_BC_RESERVED_23,
  ORC_BC_RESERVED_24,
  ORC_BC_RESERVED_25,
  ORC_BC_RESERVED_26,
  ORC_BC_RESERVED_27,
  ORC_BC_RESERVED_28,
  ORC_BC_RESERVED_29,
  ORC_BC_RESERVED_30,
  ORC_BC_RESERVED_31,
  ORC_BC_absb,
  ORC_BC_addb,
  ORC_BC_addssb,
  ORC_BC_addusb,
  ORC_BC_andb,
  ORC_BC_andnb,
  ORC_BC_avgsb,
  ORC_BC_avgub,
  /* 40 */
  ORC_BC_cmpeqb,
  ORC_BC_cmpgtsb,
  ORC_BC_copyb,
  ORC_BC_loadb,
  ORC_BC_loadoffb,
  ORC_BC_loadupdb,
  ORC_BC_loadupib,
  ORC_BC_loadpb,
  ORC_BC_ldresnearb,
  ORC_BC_ldresnearl,
  /* 50 */
  ORC_BC_ldreslinb,
  ORC_BC_ldreslinl,
  ORC_BC_maxsb,
  ORC_BC_maxub,
  ORC_BC_minsb,
  ORC_BC_minub,
  ORC_BC_mullb,
  ORC_BC_mulhsb,
  ORC_BC_mulhub,
  ORC_BC_orb,
  /* 60 */
  ORC_BC_shlb,
  ORC_BC_shrsb,
  ORC_BC_shrub,
  ORC_BC_signb,
  ORC_BC_storeb,
  ORC_BC_subb,
  ORC_BC_subssb,
  ORC_BC_subusb,
  ORC_BC_xorb,
  ORC_BC_absw,
  /* 70 */
  ORC_BC_addw,
  ORC_BC_addssw,
  ORC_BC_addusw,
  ORC_BC_andw,
  ORC_BC_andnw,
  ORC_BC_avgsw,
  ORC_BC_avguw,
  ORC_BC_cmpeqw,
  ORC_BC_cmpgtsw,
  ORC_BC_copyw,
  /* 80 */
  ORC_BC_div255w,
  ORC_BC_divluw,
  ORC_BC_loadw,
  ORC_BC_loadoffw,
  ORC_BC_loadpw,
  ORC_BC_maxsw,
  ORC_BC_maxuw,
  ORC_BC_minsw,
  ORC_BC_minuw,
  ORC_BC_mullw,
  /* 90 */
  ORC_BC_mulhsw,
  ORC_BC_mulhuw,
  ORC_BC_orw,
  ORC_BC_shlw,
  ORC_BC_shrsw,
  ORC_BC_shruw,
  ORC_BC_signw,
  ORC_BC_storew,
  ORC_BC_subw,
  ORC_BC_subssw,
  /* 100 */
  ORC_BC_subusw,
  ORC_BC_xorw,
  ORC_BC_absl,
  ORC_BC_addl,
  ORC_BC_addssl,
  ORC_BC_addusl,
  ORC_BC_andl,
  ORC_BC_andnl,
  ORC_BC_avgsl,
  ORC_BC_avgul,
  /* 110 */
  ORC_BC_cmpeql,
  ORC_BC_cmpgtsl,
  ORC_BC_copyl,
  ORC_BC_loadl,
  ORC_BC_loadoffl,
  ORC_BC_loadpl,
  ORC_BC_maxsl,
  ORC_BC_maxul,
  ORC_BC_minsl,
  ORC_BC_minul,
  /* 120 */
  ORC_BC_mulll,
  ORC_BC_mulhsl,
  ORC_BC_mulhul,
  ORC_BC_orl,
  ORC_BC_shll,
  ORC_BC_shrsl,
  ORC_BC_shrul,
  ORC_BC_signl,
  ORC_BC_storel,
  ORC_BC_subl,
  /* 130 */
  ORC_BC_subssl,
  ORC_BC_subusl,
  ORC_BC_xorl,
  ORC_BC_loadq,
  ORC_BC_loadpq,
  ORC_BC_storeq,
  ORC_BC_splatw3q,
  ORC_BC_copyq,
  ORC_BC_cmpeqq,
  ORC_BC_cmpgtsq,
  /* 140 */
  ORC_BC_andq,
  ORC_BC_andnq,
  ORC_BC_orq,
  ORC_BC_xorq,
  ORC_BC_addq,
  ORC_BC_subq,
  ORC_BC_shlq,
  ORC_BC_shrsq,
  ORC_BC_shruq,
  ORC_BC_convsbw,
  /* 150 */
  ORC_BC_convubw,
  ORC_BC_splatbw,
  ORC_BC_splatbl,
  ORC_BC_convswl,
  ORC_BC_convuwl,
  ORC_BC_convslq,
  ORC_BC_convulq,
  ORC_BC_convwb,
  ORC_BC_convhwb,
  ORC_BC_convssswb,
  /* 160 */
  ORC_BC_convsuswb,
  ORC_BC_convusswb,
  ORC_BC_convuuswb,
  ORC_BC_convlw,
  ORC_BC_convhlw,
  ORC_BC_convssslw,
  ORC_BC_convsuslw,
  ORC_BC_convusslw,
  ORC_BC_convuuslw,
  ORC_BC_convql,
  /* 170 */
  ORC_BC_convsssql,
  ORC_BC_convsusql,
  ORC_BC_convussql,
  ORC_BC_convuusql,
  ORC_BC_mulsbw,
  ORC_BC_mulubw,
  ORC_BC_mulswl,
  ORC_BC_muluwl,
  ORC_BC_mulslq,
  ORC_BC_mululq,
  /* 180 */
  ORC_BC_accw,
  ORC_BC_accl,
  ORC_BC_accsadubl,
  ORC_BC_swapw,
  ORC_BC_swapl,
  ORC_BC_swapwl,
  ORC_BC_swapq,
  ORC_BC_swaplq,
  ORC_BC_select0wb,
  ORC_BC_select1wb,
  /* 190 */
  ORC_BC_select0lw,
  ORC_BC_select1lw,
  ORC_BC_select0ql,
  ORC_BC_select1ql,
  ORC_BC_mergelq,
  ORC_BC_mergewl,
  ORC_BC_mergebw,
  ORC_BC_splitql,
  ORC_BC_splitlw,
  ORC_BC_splitwb,
  /* 200 */
  ORC_BC_addf,
  ORC_BC_subf,
  ORC_BC_mulf,
  ORC_BC_divf,
  ORC_BC_sqrtf,
  ORC_BC_maxf,
  ORC_BC_minf,
  ORC_BC_cmpeqf,
  ORC_BC_cmpltf,
  ORC_BC_cmplef,
  /* 210 */
  ORC_BC_convfl,
  ORC_BC_convlf,
  ORC_BC_addd,
  ORC_BC_subd,
  ORC_BC_muld,
  ORC_BC_divd,
  ORC_BC_sqrtd,
  ORC_BC_maxd,
  ORC_BC_mind,
  ORC_BC_cmpeqd,
  /* 220 */
  ORC_BC_cmpltd,
  ORC_BC_cmpled,
  ORC_BC_convdl,
  ORC_BC_convld,
  ORC_BC_convfd,
  ORC_BC_convdf,
  /* 226 */
  ORC_BC_LAST
} OrcBytecodes;
</ENUM>
<STRUCT>
<NAME>OrcCodeVariable</NAME>
struct _OrcCodeVariable {
  /*< private >*/
  int vartype;
  int size;
  orc_union64 value;
};
</STRUCT>
<STRUCT>
<NAME>OrcCode</NAME>
struct _OrcCode {
  /*< public >*/
  OrcExecutorFunc exec;

  /*< private >*/
  OrcCompileResult result;
  char *name;

  /* for execution */
  unsigned char *code;
  int code_size;
  void *chunk;

  /* for emulation */
  int n_insns;
  OrcInstruction *insns;
  OrcCodeVariable *vars;
  int is_2d;
  int constant_n;
  int constant_m;
};
</STRUCT>
<MACRO>
<NAME>ORC_ENABLE_ASM_CODE</NAME>
#define ORC_ENABLE_ASM_CODE
</MACRO>
<MACRO>
<NAME>ORC_ASM_CODE</NAME>
#define ORC_ASM_CODE(compiler,...) orc_compiler_append_code(compiler, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_COMPILER_ERROR</NAME>
#define ORC_COMPILER_ERROR(compiler, ...) do { \
  compiler->error = TRUE; \
  compiler->result = ORC_COMPILE_RESULT_UNKNOWN_PARSE; \
  orc_debug_print(ORC_DEBUG_WARNING, __FILE__, ORC_FUNCTION, __LINE__, __VA_ARGS__); \
} while (0)
</MACRO>
<ENUM>
<NAME>OrcCompileResult</NAME>
typedef enum {
  ORC_COMPILE_RESULT_OK = 0,

  ORC_COMPILE_RESULT_UNKNOWN_COMPILE = 0x100,
  ORC_COMPILE_RESULT_MISSING_RULE = 0x101,

  ORC_COMPILE_RESULT_UNKNOWN_PARSE = 0x200,
  ORC_COMPILE_RESULT_PARSE = 0x201,
  ORC_COMPILE_RESULT_VARIABLE = 0x202

} OrcCompileResult;
</ENUM>
<MACRO>
<NAME>ORC_COMPILE_RESULT_IS_SUCCESSFUL</NAME>
#define ORC_COMPILE_RESULT_IS_SUCCESSFUL(x) ((x) < 0x100)
</MACRO>
<MACRO>
<NAME>ORC_COMPILE_RESULT_IS_FATAL</NAME>
#define ORC_COMPILE_RESULT_IS_FATAL(x) ((x) >= 0x200)
</MACRO>
<STRUCT>
<NAME>OrcFixup</NAME>
struct _OrcFixup {
  /*< private >*/
  unsigned char *ptr;
  int type;
  int label;
};
</STRUCT>
<STRUCT>
<NAME>OrcCompiler</NAME>
struct _OrcCompiler {
  /*< private >*/
  OrcProgram *program;
  OrcTarget *target;

  unsigned int target_flags;

  OrcInstruction insns[ORC_N_INSNS];
  int n_insns;

  OrcVariable vars[ORC_N_COMPILER_VARIABLES];
  int n_temp_vars;
  int n_dup_vars;

  unsigned char *code;
  unsigned char *codeptr;
  
  OrcConstant constants[ORC_N_CONSTANTS];
  int n_constants;

  OrcFixup fixups[ORC_N_FIXUPS];
  int n_fixups;
  unsigned char *labels[ORC_N_LABELS];
  int labels_int[ORC_N_LABELS];
  int n_labels;

  int error;
  char *error_msg;
  OrcCompileResult result;

  int valid_regs[ORC_N_REGS];
  int save_regs[ORC_N_REGS];
  int used_regs[ORC_N_REGS];
  int alloc_regs[ORC_N_REGS];

  int loop_shift;
  int long_jumps;
  int use_frame_pointer;

  char *asm_code;
  int asm_code_len;

  int is_64bit;
  int tmpreg;
  int tmpreg2;
  int exec_reg;
  int gp_tmpreg;

  int insn_index;
  int unroll_index;
  int need_mask_regs;
  int unroll_shift;

  int alloc_loop_counter;
  int allow_gp_on_stack;
  int loop_counter;
  int size_region;
  int has_iterator_opcode;

  int offset;
  int min_temp_reg;
  int max_used_temp_reg;

  int insn_shift; /* used when emitting rules */
  int max_var_size; /* size of largest var */
  int load_params;

  void *output_insns;
  int n_output_insns;
  int n_output_insns_alloc;
};
</STRUCT>
<STRUCT>
<NAME>OrcConstant</NAME>
struct _OrcConstant {
  /*< private >*/
  int type;
  int alloc_reg;
  unsigned int value;
  unsigned int full_value[4];
  int use_count;
  int is_long;
  int label;
};
</STRUCT>
<STRUCT>
<NAME>OrcSysInsn</NAME>
struct _OrcSysInsn {
  int opcode;
  int dest_reg;
  int src1_reg;
  int src2_reg;

  int immediate;

  int mem_reg;
  int memoffset;
  int indexreg;
  int shift;
  int size;
};
</STRUCT>
<STRUCT>
<NAME>OrcSysOpcode</NAME>
struct _OrcSysOpcode {
  char name[16];
  int type;
  int flags;
  orc_uint8 prefix;
  orc_uint32 code;
  int code2;
};
</STRUCT>
<MACRO>
<NAME>ORC_SYS_OPCODE_FLAG_FIXED</NAME>
#define ORC_SYS_OPCODE_FLAG_FIXED (1<<0)
</MACRO>
<USER_FUNCTION>
<NAME>OrcDebugPrintFunc</NAME>
<RETURNS>void</RETURNS>
int level, const char *file, const char *func, int line, const char *format, va_list varargs
</USER_FUNCTION>
<ENUM>
<NAME>OrcDebugLevel</NAME>
typedef enum {
  ORC_DEBUG_NONE = 0,
  ORC_DEBUG_ERROR,
  ORC_DEBUG_WARNING,
  ORC_DEBUG_INFO,
  ORC_DEBUG_DEBUG,
  ORC_DEBUG_LOG
} OrcDebugLevel;
</ENUM>
<MACRO>
<NAME>ORC_ERROR</NAME>
#define ORC_ERROR(...) ORC_DEBUG_PRINT(ORC_DEBUG_ERROR, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_WARNING</NAME>
#define ORC_WARNING(...) ORC_DEBUG_PRINT(ORC_DEBUG_WARNING, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_INFO</NAME>
#define ORC_INFO(...) ORC_DEBUG_PRINT(ORC_DEBUG_INFO, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_DEBUG</NAME>
#define ORC_DEBUG(...) ORC_DEBUG_PRINT(ORC_DEBUG_DEBUG, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_LOG</NAME>
#define ORC_LOG(...) ORC_DEBUG_PRINT(ORC_DEBUG_LOG, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>ORC_FUNCTION</NAME>
#define ORC_FUNCTION __PRETTY_FUNCTION__
</MACRO>
<MACRO>
<NAME>ORC_DEBUG_PRINT</NAME>
#define ORC_DEBUG_PRINT(level, ...) do { \
  orc_debug_print((level), __FILE__, ORC_FUNCTION, __LINE__, __VA_ARGS__); \
}while(0)
</MACRO>
<MACRO>
<NAME>ORC_ASSERT</NAME>
#define ORC_ASSERT(test) do { \
  if (!(test)) { \
    ORC_ERROR("assertion failed: " #test ); \
    abort(); \
  } \
} while(0)
</MACRO>
<FUNCTION>
<NAME>emulate_absb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addssb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addusb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andnb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avgsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avgub</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeqb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpgtsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_copyb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadoffb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadupdb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadupib</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadpb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_ldresnearb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_ldresnearl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_ldreslinb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_ldreslinl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxub</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minub</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mullb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhub</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_orb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shlb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrsb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrub</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_signb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_storeb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subssb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subusb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_xorb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_absw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addssw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addusw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andnw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avgsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avguw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeqw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpgtsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_copyw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_div255w</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_divluw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadoffw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadpw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxuw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minuw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mullw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhuw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_orw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shlw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrsw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shruw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_signw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_storew</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subssw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subusw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_xorw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_absl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addssl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addusl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andnl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avgsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_avgul</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpgtsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_copyl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadoffl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadpl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxul</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minul</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulll</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulhul</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_orl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shll</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrsl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrul</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_signl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_storel</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subssl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subusl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_xorl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_loadpq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_storeq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splatw3q</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_copyq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeqq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpgtsq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_andnq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_orq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_xorq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shlq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shrsq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_shruq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convsbw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convubw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splatbw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splatbl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convswl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convuwl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convslq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convulq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convwb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convhwb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convssswb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convsuswb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convusswb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convuuswb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convlw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convhlw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convssslw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convsuslw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convusslw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convuuslw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convsssql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convsusql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convussql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convuusql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulsbw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulubw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulswl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_muluwl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulslq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mululq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_accw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_accl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_accsadubl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_swapw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_swapl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_swapwl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_swapq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_swaplq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select0wb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select1wb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select0lw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select1lw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select0ql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_select1ql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mergelq</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mergewl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mergebw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splitql</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splitlw</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_splitwb</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mulf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_divf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_sqrtf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_minf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeqf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpltf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmplef</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convfl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convlf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_addd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_subd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_muld</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_divd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_sqrtd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_maxd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_mind</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpeqd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpltd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_cmpled</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convdl</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convld</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convfd</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<FUNCTION>
<NAME>emulate_convdf</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int i, int n
</FUNCTION>
<USER_FUNCTION>
<NAME>OrcOpcodeEmulateFunc</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, void *user
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>OrcOpcodeEmulateNFunc</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex, int index, int n
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>OrcOpcodeEmulate16Func</NAME>
<RETURNS>void</RETURNS>
OrcOpcodeExecutor *ex
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>OrcExecutorFunc</NAME>
<RETURNS>void</RETURNS>
OrcExecutor *ex
</USER_FUNCTION>
<STRUCT>
<NAME>OrcOpcodeExecutor</NAME>
struct _OrcOpcodeExecutor {
  /*< private >*/
  int src_values[ORC_STATIC_OPCODE_N_SRC];
  int dest_values[ORC_STATIC_OPCODE_N_DEST];

  OrcOpcodeEmulateNFunc emulateN;

  void *src_ptrs[ORC_STATIC_OPCODE_N_SRC];
  void *dest_ptrs[ORC_STATIC_OPCODE_N_DEST];
  int shift;
};
</STRUCT>
<STRUCT>
<NAME>OrcExecutor</NAME>
struct _OrcExecutor {
  /*< private >*/
  OrcProgram *program;
  int n;
  int counter1;
  int counter2;
  int counter3;

  void *arrays[ORC_N_VARIABLES];
  int params[ORC_N_VARIABLES];
  int accumulators[4];
  /* exec pointer is stored in arrays[ORC_VAR_A1] */
  /* OrcCode pointer is stored in arrays[ORC_VAR_A2] */
  /* row pointers are stored in arrays[i+ORC_VAR_C1] */
  /* the stride for arrays[x] is stored in params[x] */
  /* m is stored in params[ORC_VAR_A1] */
  /* m_index is stored in params[ORC_VAR_A2] */
  /* elapsed time is stored in params[ORC_VAR_A3] */
  /* high half of params is stored in params[ORC_VAR_T1..] */
};
</STRUCT>
<STRUCT>
<NAME>OrcExecutorAlt</NAME>
struct _OrcExecutorAlt {
  /*< private >*/
  OrcProgram *program;
  int n;
  int counter1;
  int counter2;
  int counter3;

  void *arrays[ORC_N_ARRAYS];
  OrcExecutorFunc exec;
  OrcCode *code;
  void *unused1[ORC_N_VARIABLES - ORC_N_ARRAYS - 2];
  int strides[ORC_N_ARRAYS];
  int m;
  int m_index;
  int time;
  int unused2;
  int unused4[8];
  int params[ORC_VAR_T1-ORC_VAR_P1];
  int params_hi[ORC_VAR_T1-ORC_VAR_P1];
  int unused3[ORC_N_VARIABLES - ORC_VAR_T9];
  int accumulators[4];
};
</STRUCT>
<MACRO>
<NAME>ORC_EXECUTOR_EXEC</NAME>
#define ORC_EXECUTOR_EXEC(ex) ((OrcExecutorFunc)((ex)->arrays[ORC_VAR_A1]))
</MACRO>
<MACRO>
<NAME>ORC_EXECUTOR_M</NAME>
#define ORC_EXECUTOR_M(ex) ((ex)->params[ORC_VAR_A1])
</MACRO>
<MACRO>
<NAME>ORC_EXECUTOR_M_INDEX</NAME>
#define ORC_EXECUTOR_M_INDEX(ex) ((ex)->params[ORC_VAR_A2])
</MACRO>
<MACRO>
<NAME>ORC_EXECUTOR_TIME</NAME>
#define ORC_EXECUTOR_TIME(ex) ((ex)->params[ORC_VAR_A3])
</MACRO>
<TYPEDEF>
<NAME>orc_int8</NAME>
typedef int8_t orc_int8;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int16</NAME>
typedef int16_t orc_int16;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int32</NAME>
typedef int32_t orc_int32;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int64</NAME>
typedef int64_t orc_int64;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint8</NAME>
typedef uint8_t orc_uint8;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint16</NAME>
typedef uint16_t orc_uint16;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint32</NAME>
typedef uint32_t orc_uint32;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint64</NAME>
typedef uint64_t orc_uint64;
</TYPEDEF>
<MACRO>
<NAME>ORC_UINT64_C</NAME>
#define ORC_UINT64_C(x) UINT64_C(x)
</MACRO>
<MACRO>
<NAME>inline</NAME>
#define inline __inline
</MACRO>
<STRUCT>
<NAME>OrcInstruction</NAME>
struct _OrcInstruction {
  /*< private >*/
  OrcStaticOpcode *opcode;
  int dest_args[ORC_STATIC_OPCODE_N_DEST];
  int src_args[ORC_STATIC_OPCODE_N_SRC];

  OrcRule *rule;
  unsigned int flags;
  /* Source line number this instruction came from */
  int line;
};
</STRUCT>
<MACRO>
<NAME>ORC_INSTRUCTION_FLAG_X2</NAME>
#define ORC_INSTRUCTION_FLAG_X2 (1<<0)
</MACRO>
<MACRO>
<NAME>ORC_INSTRUCTION_FLAG_X4</NAME>
#define ORC_INSTRUCTION_FLAG_X4 (1<<1)
</MACRO>
<MACRO>
<NAME>ORC_INSN_FLAG_INVARIANT</NAME>
#define ORC_INSN_FLAG_INVARIANT (1<<2)
</MACRO>
<MACRO>
<NAME>ORC_INSN_FLAG_ADDED</NAME>
#define ORC_INSN_FLAG_ADDED (1<<3)
</MACRO>
<FUNCTION>
<NAME>orc_mmx_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_sse_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_arm_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_powerpc_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_c_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_neon_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_c64x_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_c64x_c_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_code_chunk_free</NAME>
<RETURNS>void</RETURNS>
OrcCodeChunk *chunk
</FUNCTION>
<FUNCTION>
<NAME>orc_compiler_emit_invariants</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler
</FUNCTION>
<FUNCTION>
<NAME>orc_program_has_float</NAME>
<RETURNS>int</RETURNS>
OrcCompiler *compiler
</FUNCTION>
<STRUCT>
<NAME>OrcCodeChunk</NAME>
</STRUCT>
<MACRO>
<NAME>ORC_N_REGS</NAME>
#define ORC_N_REGS (32*4)
</MACRO>
<MACRO>
<NAME>ORC_N_INSNS</NAME>
#define ORC_N_INSNS 100
</MACRO>
<MACRO>
<NAME>ORC_N_VARIABLES</NAME>
#define ORC_N_VARIABLES 64
</MACRO>
<MACRO>
<NAME>ORC_N_ARRAYS</NAME>
#define ORC_N_ARRAYS 12
</MACRO>
<MACRO>
<NAME>ORC_N_REGISTERS</NAME>
#define ORC_N_REGISTERS 20
</MACRO>
<MACRO>
<NAME>ORC_N_FIXUPS</NAME>
#define ORC_N_FIXUPS 100
</MACRO>
<MACRO>
<NAME>ORC_N_CONSTANTS</NAME>
#define ORC_N_CONSTANTS 20
</MACRO>
<MACRO>
<NAME>ORC_N_LABELS</NAME>
#define ORC_N_LABELS 40
</MACRO>
<MACRO>
<NAME>ORC_N_COMPILER_VARIABLES</NAME>
#define ORC_N_COMPILER_VARIABLES (ORC_N_VARIABLES+32)
</MACRO>
<MACRO>
<NAME>ORC_GP_REG_BASE</NAME>
#define ORC_GP_REG_BASE 32
</MACRO>
<MACRO>
<NAME>ORC_VEC_REG_BASE</NAME>
#define ORC_VEC_REG_BASE 64
</MACRO>
<MACRO>
<NAME>ORC_REG_INVALID</NAME>
#define ORC_REG_INVALID 0
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_N_SRC</NAME>
#define ORC_STATIC_OPCODE_N_SRC 4
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_N_DEST</NAME>
#define ORC_STATIC_OPCODE_N_DEST 2
</MACRO>
<MACRO>
<NAME>ORC_OPCODE_N_ARGS</NAME>
#define ORC_OPCODE_N_ARGS 4
</MACRO>
<MACRO>
<NAME>ORC_N_TARGETS</NAME>
#define ORC_N_TARGETS 10
</MACRO>
<MACRO>
<NAME>ORC_N_RULE_SETS</NAME>
#define ORC_N_RULE_SETS 10
</MACRO>
<MACRO>
<NAME>ORC_MAX_VAR_SIZE</NAME>
#define ORC_MAX_VAR_SIZE 8
</MACRO>
<MACRO>
<NAME>ORC_MAX_DEST_VARS</NAME>
#define ORC_MAX_DEST_VARS 4
</MACRO>
<MACRO>
<NAME>ORC_MAX_SRC_VARS</NAME>
#define ORC_MAX_SRC_VARS 8
</MACRO>
<MACRO>
<NAME>ORC_MAX_TEMP_VARS</NAME>
#define ORC_MAX_TEMP_VARS 16
</MACRO>
<MACRO>
<NAME>ORC_MAX_CONST_VARS</NAME>
#define ORC_MAX_CONST_VARS 8
</MACRO>
<MACRO>
<NAME>ORC_MAX_PARAM_VARS</NAME>
#define ORC_MAX_PARAM_VARS 8
</MACRO>
<MACRO>
<NAME>ORC_MAX_ACCUM_VARS</NAME>
#define ORC_MAX_ACCUM_VARS 4
</MACRO>
<ENUM>
<NAME>OrcTargetMipsFlags</NAME>
typedef enum {
  ORC_TARGET_MIPS_FRAME_POINTER = (1<<0),
  ORC_TARGET_MIPS_DSP2          = (1<<1),
} OrcTargetMipsFlags;
</ENUM>
<ENUM>
<NAME>OrcMipsRegister</NAME>
typedef enum {
  ORC_MIPS_ZERO = ORC_GP_REG_BASE+0,
  ORC_MIPS_AT,
  ORC_MIPS_V0,
  ORC_MIPS_V1,
  ORC_MIPS_A0,
  ORC_MIPS_A1,
  ORC_MIPS_A2,
  ORC_MIPS_A3,
  ORC_MIPS_T0,
  ORC_MIPS_T1,
  ORC_MIPS_T2,
  ORC_MIPS_T3,
  ORC_MIPS_T4,
  ORC_MIPS_T5,
  ORC_MIPS_T6,
  ORC_MIPS_T7,
  ORC_MIPS_S0,
  ORC_MIPS_S1,
  ORC_MIPS_S2,
  ORC_MIPS_S3,
  ORC_MIPS_S4,
  ORC_MIPS_S5,
  ORC_MIPS_S6,
  ORC_MIPS_S7,
  ORC_MIPS_T8,
  ORC_MIPS_T9,
  ORC_MIPS_K0,
  ORC_MIPS_K1,
  ORC_MIPS_GP,
  ORC_MIPS_SP,
  ORC_MIPS_FP,
  ORC_MIPS_RA
} OrcMipsRegister;
</ENUM>
<FUNCTION>
<NAME>orc_mips_get_cpu_flags</NAME>
<RETURNS>unsigned long</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_label</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned int label
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_nop</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_sw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister reg, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_swr</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister reg, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_swl</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister reg, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_sh</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister reg, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_sb</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister reg, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lwr</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lwl</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lh</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lb</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_lbu</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister dest, OrcMipsRegister base, unsigned int offset
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_jr</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, OrcMipsRegister address_reg
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_conditional_branch</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int condition, OrcMipsRegister rs, OrcMipsRegister rt, unsigned int label
</FUNCTION>
<FUNCTION>
<NAME>orc_mips_emit_conditional_branch_with_offset</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int condition, OrcMipsRegister rs, OrcMipsRegister rt, int offset
</FUNCTION>
<MACRO>
<NAME>orc_mips_emit_beqz</NAME>
#define orc_mips_emit_beqz(compiler, reg, label) \
    orc_mips_emit_conditional_branch(compiler, ORC_MIPS_BEQ, reg, ORC_MIPS_ZERO, label)
</MACRO>
<MACRO>
<NAME>orc_mips_emit_bnez</NAME>
#define orc_mips_emit_bnez(compiler, reg, label) \
    orc_mips_emit_conditional_branch(compiler, ORC_MIPS_BNE, reg, ORC_MIPS_ZERO, label)
</MACRO>
<MACRO>
<NAME>orc_mips_emit_blez</NAME>
#define orc_mips_emit_blez(compiler, reg, label) \
    orc_mips_emit_conditional_branch(compiler, ORC_MIPS_BLEZ, reg, ORC_MIPS_ZERO, label)
</MACRO>
<MACRO>
<NAME>orc_mips_emit_beq</NAME>
#define orc_mips_emit_beq(compiler, reg1, reg2, label) \
    orc_mips_emit_conditional_branch(compiler, ORC_MIPS_BEQ, reg1, reg2, label)
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_PROGRAM</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_PROGRAM 0
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_N</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_N 4
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_COUNTER1</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_COUNTER1 8
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_COUNTER2</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_COUNTER2 12
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_COUNTER3</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_COUNTER3 16
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_ARRAYS</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_ARRAYS(i) (20 + 4 * i)
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_PARAMS</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_PARAMS(i) (276 + 4 * i)
</MACRO>
<MACRO>
<NAME>ORC_MIPS_EXECUTOR_OFFSET_ACCUMULATORS</NAME>
#define ORC_MIPS_EXECUTOR_OFFSET_ACCUMULATORS(i) (532 + 4 * i)
</MACRO>
<ENUM>
<NAME>OrcMMXRegister</NAME>
typedef enum {
  X86_MM0 = ORC_VEC_REG_BASE,
  X86_MM1,
  X86_MM2,
  X86_MM3,
  X86_MM4,
  X86_MM5,
  X86_MM6,
  X86_MM7
} OrcMMXRegister;
</ENUM>
<MACRO>
<NAME>ORC_MMX_SHUF</NAME>
#define ORC_MMX_SHUF(a,b,c,d) ((((a)&3)<<6)|(((b)&3)<<4)|(((c)&3)<<2)|(((d)&3)<<0))
</MACRO>
<FUNCTION>
<NAME>orc_x86_get_regname_mmx</NAME>
<RETURNS>const char *</RETURNS>
int i
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_memoffset_mmx</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int size, int offset, int reg1, int reg2, int is_aligned
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_memindex_mmx</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int size, int offset, int reg1, int regindex, int shift, int reg2, int is_aligned
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_mmx_memoffset</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int size, int reg1, int offset, int reg2, int aligned, int uncached
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_mmx_reg_reg</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int reg1, int reg2
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_reg_mmx</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int reg1, int reg2
</FUNCTION>
<FUNCTION>
<NAME>orc_x86_emit_mov_mmx_reg</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int reg1, int reg2
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadib</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadiw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadil</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadpb</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadpw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadpl</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_loadpq</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, int value
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_660f</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *insn_name, int code, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_f20f</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *insn_name, int code, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_f30f</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *insn_name, int code, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_0f</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *insn_name, int code, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_pshufw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int shuf, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_palignr</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int align, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_pinsrw_memoffset</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int imm, int offset, int src, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_pextrw_memoffset</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int imm, int src, int offset, int dest
</FUNCTION>
<FUNCTION>
<NAME>orc_mmx_emit_shiftimm</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *insn_name, int code, int modrm_code, int shift, int reg
</FUNCTION>
<STRUCT>
<NAME>OrcOnce</NAME>
struct _OrcOnce {
  int inited;
  void *value;
};
</STRUCT>
<STRUCT>
<NAME>OrcMutex</NAME>
</STRUCT>
<STRUCT>
<NAME>OrcOpcodeSet</NAME>
struct _OrcOpcodeSet {
  /*< private >*/
  int opcode_major;
  char prefix[8];

  int n_opcodes;
  OrcStaticOpcode *opcodes;
};
</STRUCT>
<MACRO>
<NAME>ORC_STATIC_OPCODE_ACCUMULATOR</NAME>
#define ORC_STATIC_OPCODE_ACCUMULATOR (1<<0)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_FLOAT_SRC</NAME>
#define ORC_STATIC_OPCODE_FLOAT_SRC (1<<1)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_FLOAT_DEST</NAME>
#define ORC_STATIC_OPCODE_FLOAT_DEST (1<<2)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_FLOAT</NAME>
#define ORC_STATIC_OPCODE_FLOAT (ORC_STATIC_OPCODE_FLOAT_SRC|ORC_STATIC_OPCODE_FLOAT_DEST)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_SCALAR</NAME>
#define ORC_STATIC_OPCODE_SCALAR (1<<3)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_LOAD</NAME>
#define ORC_STATIC_OPCODE_LOAD (1<<4)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_STORE</NAME>
#define ORC_STATIC_OPCODE_STORE (1<<5)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_INVARIANT</NAME>
#define ORC_STATIC_OPCODE_INVARIANT (1<<6)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_ITERATOR</NAME>
#define ORC_STATIC_OPCODE_ITERATOR (1<<7)
</MACRO>
<MACRO>
<NAME>ORC_STATIC_OPCODE_COPY</NAME>
#define ORC_STATIC_OPCODE_COPY (1<<8)
</MACRO>
<STRUCT>
<NAME>OrcStaticOpcode</NAME>
struct _OrcStaticOpcode {
  char name[16];
  unsigned int flags;
  int dest_size[ORC_STATIC_OPCODE_N_DEST];
  int src_size[ORC_STATIC_OPCODE_N_SRC];
  OrcOpcodeEmulateNFunc emulateN;
};
</STRUCT>
<MACRO>
<NAME>IS_POWERPC_BE</NAME>
#define IS_POWERPC_BE(compiler) \
  (ORC_UNLIKELY ((compiler->target_flags & ORC_TARGET_POWERPC_LE) == 0))
</MACRO>
<MACRO>
<NAME>IS_POWERPC_LE</NAME>
#define IS_POWERPC_LE(compiler) \
  (ORC_LIKELY ((compiler->target_flags & ORC_TARGET_POWERPC_LE) == ORC_TARGET_POWERPC_LE))
</MACRO>
<VARIABLE>
<NAME>orc_powerpc_cpu_flags</NAME>
extern int orc_powerpc_cpu_flags;
</VARIABLE>
<FUNCTION>
<NAME>powerpc_detect_cpu_flags</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>powerpc_get_regname</NAME>
<RETURNS>const char *</RETURNS>
int i
</FUNCTION>
<FUNCTION>
<NAME>powerpc_regnum</NAME>
<RETURNS>int</RETURNS>
int i
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned int insn
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_add</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int regb
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_addi_rec</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_addi</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_lwz</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_stw</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regs, int rega, int offset
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_stwu</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regs, int rega, int offset
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_ld</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_std</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regs, int rega, int offset
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_stdu</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regs, int rega, int offset
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_ret</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_b</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int label
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_beq</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int label
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_bne</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int label
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_label</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int label
</FUNCTION>
<FUNCTION>
<NAME>powerpc_add_fixup</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int type, unsigned char *ptr, int label
</FUNCTION>
<FUNCTION>
<NAME>powerpc_do_fixups</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_srawi</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int regd, int rega, int shift, int record
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_655510</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int major, int d, int a, int b, int minor
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_D</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, const char *name, unsigned int insn, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_X</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned int insn, int d, int a, int b
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VA</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, const char *name, unsigned int insn, int d, int a, int b, int c
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VA_acb</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, const char *name, unsigned int insn, int d, int a, int b, int c
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned int insn, int d, int a, int b
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_b</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int a
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_db</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int b
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_dbi</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int b, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VXR</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, const char *name, unsigned int insn, int d, int a, int b, int record
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_2</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int a, int b
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_3</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int a, int b, int c
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_3_reg</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int a, int b, int c
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_VX_4</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, const char *name, unsigned int insn, int d, int a
</FUNCTION>
<FUNCTION>
<NAME>powerpc_get_constant</NAME>
<RETURNS>int</RETURNS>
OrcCompiler *p, int type, int value
</FUNCTION>
<FUNCTION>
<NAME>powerpc_get_constant_full</NAME>
<RETURNS>int</RETURNS>
OrcCompiler *p, int value0, int value1, int value2, int value3
</FUNCTION>
<FUNCTION>
<NAME>powerpc_load_long_constant</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, int reg, orc_uint32 a, orc_uint32 b, orc_uint32 c, orc_uint32 d
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_full_constants</NAME>
<RETURNS>void</RETURNS>
OrcCompiler* p
</FUNCTION>
<FUNCTION>
<NAME>powerpc_emit_load_address</NAME>
<RETURNS>void</RETURNS>
OrcCompiler* compiler, int regd, int rega, int imm
</FUNCTION>
<FUNCTION>
<NAME>powerpc_load_constant</NAME>
<RETURNS>void</RETURNS>
OrcCompiler* p, int i, int reg
</FUNCTION>
<FUNCTION>
<NAME>powerpc_load_align</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int vector_reg, int offset_reg, int src_reg
</FUNCTION>
<FUNCTION>
<NAME>powerpc_store_align</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int vector_reg, int offset_reg, int src_reg
</FUNCTION>
<MACRO>
<NAME>powerpc_emit_vand</NAME>
#define powerpc_emit_vand(p,a,b,c)         powerpc_emit_VX_2 (p, "vand", 0x10000404, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vandc</NAME>
#define powerpc_emit_vandc(p,a,b,c)        powerpc_emit_VX_2 (p, "vandc", 0x10000444, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vor</NAME>
#define powerpc_emit_vor(p,a,b,c)          powerpc_emit_VX_2 (p, "vor", 0x10000484, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vxor</NAME>
#define powerpc_emit_vxor(p,a,b,c)         powerpc_emit_VX_2 (p, "vxor", 0x100004c4, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulesb</NAME>
#define powerpc_emit_vmulesb(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulesb", 0x10000308, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmuleub</NAME>
#define powerpc_emit_vmuleub(p,a,b,c)      powerpc_emit_VX_2 (p, "vmuleub", 0x10000208, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulesh</NAME>
#define powerpc_emit_vmulesh(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulesh", 0x10000348, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmuleuh</NAME>
#define powerpc_emit_vmuleuh(p,a,b,c)      powerpc_emit_VX_2 (p, "vmuleuh", 0x10000248, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulosb</NAME>
#define powerpc_emit_vmulosb(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulosb", 0x10000108, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmuloub</NAME>
#define powerpc_emit_vmuloub(p,a,b,c)      powerpc_emit_VX_2 (p, "vmuloub", 0x10000008, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulosh</NAME>
#define powerpc_emit_vmulosh(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulosh", 0x10000148, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulouh</NAME>
#define powerpc_emit_vmulouh(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulouh", 0x10000048, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmuleuw</NAME>
#define powerpc_emit_vmuleuw(p,a,b,c)      powerpc_emit_VX_2 (p, "vmuleuw", 0x10000288, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmulouw</NAME>
#define powerpc_emit_vmulouw(p,a,b,c)      powerpc_emit_VX_2 (p, "vmulouw", 0x10000088, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrghb</NAME>
#define powerpc_emit_vmrghb(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrghb", 0x1000000c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrghh</NAME>
#define powerpc_emit_vmrghh(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrghh", 0x1000004c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrghw</NAME>
#define powerpc_emit_vmrghw(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrghw", 0x1000008c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrglb</NAME>
#define powerpc_emit_vmrglb(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrglb", 0x1000010c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrglh</NAME>
#define powerpc_emit_vmrglh(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrglh", 0x1000014c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmrglw</NAME>
#define powerpc_emit_vmrglw(p,a,b,c)       powerpc_emit_VX_2 (p, "vmrglw", 0x1000018c, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkshss</NAME>
#define powerpc_emit_vpkshss(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkshss", 0x1000018e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkshus</NAME>
#define powerpc_emit_vpkshus(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkshus", 0x1000010e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkswss</NAME>
#define powerpc_emit_vpkswss(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkswss", 0x100001ce, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkswus</NAME>
#define powerpc_emit_vpkswus(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkswus", 0x1000014e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkuhus</NAME>
#define powerpc_emit_vpkuhus(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkuhus", 0x1000008e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkuhum</NAME>
#define powerpc_emit_vpkuhum(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkuhum", 0x1000000e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkuwus</NAME>
#define powerpc_emit_vpkuwus(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkuwus", 0x100000ce, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vpkuwum</NAME>
#define powerpc_emit_vpkuwum(p,a,b,c)      powerpc_emit_VX_2 (p, "vpkuwum", 0x1000004e, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vadduhm</NAME>
#define powerpc_emit_vadduhm(p,a,b,c)      powerpc_emit_VX_2 (p, "vadduhm", 0x10000040, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vadduwm</NAME>
#define powerpc_emit_vadduwm(p,a,b,c)      powerpc_emit_VX_2 (p, "vadduwm", 0x10000080, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vsububm</NAME>
#define powerpc_emit_vsububm(p,a,b,c)      powerpc_emit_VX_2 (p, "vsububm", 0x10000400, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vsum4ubs</NAME>
#define powerpc_emit_vsum4ubs(p,a,b,c)     powerpc_emit_VX_2 (p, "vsum4ubs", 0x10000608, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmaxub</NAME>
#define powerpc_emit_vmaxub(p,a,b,c)       powerpc_emit_VX_2 (p, "vmaxub", 0x10000002, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmaxsb</NAME>
#define powerpc_emit_vmaxsb(p,a,b,c)       powerpc_emit_VX_2 (p, "vmaxsb", 0x10000102, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmaxsh</NAME>
#define powerpc_emit_vmaxsh(p,a,b,c)       powerpc_emit_VX_2 (p, "vmaxsh", 0x10000142, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmaxsw</NAME>
#define powerpc_emit_vmaxsw(p,a,b,c)       powerpc_emit_VX_2 (p, "vmaxsw", 0x10000182, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vminub</NAME>
#define powerpc_emit_vminub(p,a,b,c)       powerpc_emit_VX_2 (p, "vminub", 0x10000202, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vminsb</NAME>
#define powerpc_emit_vminsb(p,a,b,c)       powerpc_emit_VX_2 (p, "vminsb", 0x10000302, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vminsh</NAME>
#define powerpc_emit_vminsh(p,a,b,c)       powerpc_emit_VX_2 (p, "vminsh", 0x10000342, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vminsw</NAME>
#define powerpc_emit_vminsw(p,a,b,c)       powerpc_emit_VX_2 (p, "vminsw", 0x10000382, a, b, c)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vsldoi</NAME>
#define powerpc_emit_vsldoi(p,a,b,c,d)     powerpc_emit_VX_3 (p, "vsldoi", 0x1000002c | (d<<6), a, b, c, d)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vmladduhm</NAME>
#define powerpc_emit_vmladduhm(p,a,b,c,d)  powerpc_emit_VA (p, "vmladduhm", 0x10000022, a, b, c, d)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vupkhsb</NAME>
#define powerpc_emit_vupkhsb(p,a,b)        powerpc_emit_VX_4 (p, "vupkhsb", 0x1000020e, a, b)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vupkhsh</NAME>
#define powerpc_emit_vupkhsh(p,a,b)        powerpc_emit_VX_4 (p, "vupkhsh", 0x1000024e, a, b)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vupklsb</NAME>
#define powerpc_emit_vupklsb(p,a,b)        powerpc_emit_VX_4 (p, "vupklsb", 0x1000028e, a, b)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vupklsh</NAME>
#define powerpc_emit_vupklsh(p,a,b)        powerpc_emit_VX_4 (p, "vupklsh", 0x100002ce, a, b)
</MACRO>
<MACRO>
<NAME>powerpc_emit_vperm</NAME>
#define powerpc_emit_vperm(p,a,b,c,d)      powerpc_emit_VA (p, "vperm", 0x1000002b, a, b, c, d)
</MACRO>
<MACRO>
<NAME>ORC_PROGRAM_ERROR</NAME>
#define ORC_PROGRAM_ERROR(program, ...) do { \
  program->error = TRUE; \
  orc_debug_print(ORC_DEBUG_WARNING, __FILE__, ORC_FUNCTION, __LINE__, __VA_ARGS__); \
} while (0)
</MACRO>
<STRUCT>
<NAME>OrcProgram</NAME>
struct _OrcProgram {
  /*< private >*/
  struct {
    OrcStaticOpcode *opcode;
    int dest_args[ORC_STATIC_OPCODE_N_DEST];
    int src_args[ORC_STATIC_OPCODE_N_SRC];

    OrcRule *rule;
  } _unused[ORC_N_INSNS]; /* needed for ABI compatibility */
  int n_insns;

  struct {
    char *name;
    char *type_name;

    int size;
    OrcVarType vartype;

    int used;
    int first_use;
    int last_use;
    int replaced;
    int replacement;

    int alloc;
    int is_chained;
    int is_aligned;
    int is_uncached;

    int value;

    int ptr_register;
    int ptr_offset;
    int mask_alloc;
    int aligned_data;
    int param_type;
    int load_dest;
  } _unused3[ORC_N_VARIABLES]; /* needed for ABI compatibility */

  int n_src_vars;
  int n_dest_vars;
  int n_param_vars;
  int n_const_vars;
  int n_temp_vars;
  int n_accum_vars;

  char *name;
  char *asm_code;

  unsigned char *_unused2;
  /* The offset of code_exec in this structure is part of the ABI */
  void *code_exec;

  OrcInstruction insns[ORC_N_INSNS];
  OrcVariable vars[ORC_N_VARIABLES];

  void *backup_func;
  char *backup_name;
  int is_2d;
  int constant_n;
  int n_multiple;
  int n_minimum;
  int n_maximum;
  int constant_m;

  OrcCode *orccode;

  /* Hide this here.  Belongs in a Parser object */
  char *init_function;
  char *error_msg;
  unsigned int current_line;
};
</STRUCT>
<MACRO>
<NAME>ORC_SRC_ARG</NAME>
#define ORC_SRC_ARG(p,i,n) ((p)->vars[(i)->src_args[(n)]].alloc)
</MACRO>
<MACRO>
<NAME>ORC_DEST_ARG</NAME>
#define ORC_DEST_ARG(p,i,n) ((p)->vars[(i)->dest_args[(n)]].alloc)
</MACRO>
<MACRO>
<NAME>ORC_SRC_TYPE</NAME>
#define ORC_SRC_TYPE(p,i,n) ((p)->vars[(i)->src_args[(n)]].vartype)
</MACRO>
<MACRO>
<NAME>ORC_DEST_TYPE</NAME>
#define ORC_DEST_TYPE(p,i,n) ((p)->vars[(i)->dest_args[(n)]].vartype)
</MACRO>
<MACRO>
<NAME>ORC_SRC_VAL</NAME>
#define ORC_SRC_VAL(p,insn,n) ((p)->vars[(insn)->src_args[(n)]].value.i)
</MACRO>
<MACRO>
<NAME>ORC_DEST_VAL</NAME>
#define ORC_DEST_VAL(p,insn,n) ((p)->vars[(insn)->dest_args[(n)]].value.i)
</MACRO>
<USER_FUNCTION>
<NAME>OrcRuleEmitFunc</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *p, void *user, OrcInstruction *insn
</USER_FUNCTION>
<STRUCT>
<NAME>OrcRule</NAME>
struct _OrcRule {
  /*< private >*/
  OrcRuleEmitFunc emit;
  void *emit_user;
};
</STRUCT>
<STRUCT>
<NAME>OrcRuleSet</NAME>
struct _OrcRuleSet {
  /*< private >*/
  int opcode_major;
  int required_target_flags;

  OrcRule *rules;
  int n_rules;
};
</STRUCT>
<ENUM>
<NAME>OrcSSERegister</NAME>
typedef enum {
  X86_XMM0 = ORC_VEC_REG_BASE + 16,
  X86_XMM1,
  X86_XMM2,
  X86_XMM3,
  X86_XMM4,
  X86_XMM5,
  X86_XMM6,
  X86_XMM7,
  X86_XMM8,
  X86_XMM9,
  X86_XMM10,
  X86_XMM11,
  X86_XMM12,
  X86_XMM13,
  X86_XMM14,
  X86_XMM15
}OrcSSERegister;
</ENUM>
<MACRO>
<NAME>ORC_SSE_SHUF</NAME>
#define ORC_SSE_SHUF(a,b,c,d) ((((a)&3)<<6)|(((b)&3)<<4)|(((c)&3)<<2)|(((d)&3)<<0))
</MACRO>
<ENUM>
<NAME>OrcTargetPowerPCFlags</NAME>
typedef enum {
  ORC_TARGET_POWERPC_64BIT = (1<<0),
  ORC_TARGET_POWERPC_LE = (1<<1),
  ORC_TARGET_POWERPC_ALTIVEC = (1<<2),
  ORC_TARGET_POWERPC_VSX = (1<<3),
  ORC_TARGET_POWERPC_V207 = (1<<4)
} OrcTargetPowerPCFlags;
</ENUM>
<ENUM>
<NAME>OrcTargetMMXFlags</NAME>
typedef enum {
  ORC_TARGET_MMX_MMX = (1<<0),
  ORC_TARGET_MMX_MMXEXT = (1<<1),
  ORC_TARGET_MMX_3DNOW = (1<<2),
  ORC_TARGET_MMX_3DNOWEXT = (1<<3),
  ORC_TARGET_MMX_SSSE3 = (1<<4),
  ORC_TARGET_MMX_SSE4_1 = (1<<5),
  ORC_TARGET_MMX_SSE4_2 = (1<<6),
  ORC_TARGET_MMX_FRAME_POINTER = (1<<7),
  ORC_TARGET_MMX_SHORT_JUMPS = (1<<8),
  ORC_TARGET_MMX_64BIT = (1<<9)
} OrcTargetMMXFlags;
</ENUM>
<ENUM>
<NAME>OrcTargetSSEFlags</NAME>
typedef enum {
  ORC_TARGET_SSE_SSE2 = (1<<0),
  ORC_TARGET_SSE_SSE3 = (1<<1),
  ORC_TARGET_SSE_SSSE3 = (1<<2),
  ORC_TARGET_SSE_SSE4_1 = (1<<3),
  ORC_TARGET_SSE_SSE4_2 = (1<<4),
  ORC_TARGET_SSE_SSE4A = (1<<5),
  ORC_TARGET_SSE_SSE5 = (1<<6),
  ORC_TARGET_SSE_FRAME_POINTER = (1<<7),
  ORC_TARGET_SSE_SHORT_JUMPS = (1<<8),
  ORC_TARGET_SSE_64BIT = (1<<9)
}OrcTargetSSEFlags;
</ENUM>
<STRUCT>
<NAME>OrcTarget</NAME>
struct _OrcTarget {
  const char *name;
  orc_bool executable;
  int data_register_offset;

  unsigned int (*get_default_flags)(void);
  void (*compiler_init)(OrcCompiler *compiler);
  void (*compile)(OrcCompiler *compiler);

  OrcRuleSet rule_sets[ORC_N_RULE_SETS];
  int n_rule_sets;

  const char * (*get_asm_preamble)(void);
  void (*load_constant)(OrcCompiler *compiler, int reg, int size, int value);
  const char * (*get_flag_name)(int shift);
  void (*flush_cache) (OrcCode *code);
  void (*load_constant_long)(OrcCompiler *compiler, int reg,
      OrcConstant *constant);

  void *_unused[5];
};
</STRUCT>
<ENUM>
<NAME>OrcCompileResult</NAME>
typedef enum {
  ORC_COMPILE_RESULT_OK = 0,

  ORC_COMPILE_RESULT_UNKNOWN_COMPILE = 0x100,
  ORC_COMPILE_RESULT_MISSING_RULE = 0x101,

  ORC_COMPILE_RESULT_UNKNOWN_PARSE = 0x200,
  ORC_COMPILE_RESULT_PARSE = 0x201,
  ORC_COMPILE_RESULT_VARIABLE = 0x202

} OrcCompileResult;
</ENUM>
<TYPEDEF>
<NAME>orc_int8</NAME>
typedef int8_t orc_int8;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int16</NAME>
typedef int16_t orc_int16;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int32</NAME>
typedef int32_t orc_int32;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_int64</NAME>
typedef int64_t orc_int64;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint8</NAME>
typedef uint8_t orc_uint8;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint16</NAME>
typedef uint16_t orc_uint16;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint32</NAME>
typedef uint32_t orc_uint32;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_uint64</NAME>
typedef uint64_t orc_uint64;
</TYPEDEF>
<TYPEDEF>
<NAME>orc_intptr</NAME>
typedef intptr_t orc_intptr;
</TYPEDEF>
<MACRO>
<NAME>ORC_UINT64_C</NAME>
#define ORC_UINT64_C(x) UINT64_C(x)
</MACRO>
<MACRO>
<NAME>ORC_VAR_FLAG_VOLATILE_WORKAROUND</NAME>
#define ORC_VAR_FLAG_VOLATILE_WORKAROUND (1<<0)
</MACRO>
<ENUM>
<NAME>OrcVarType</NAME>
typedef enum {
  ORC_VAR_TYPE_TEMP,
  ORC_VAR_TYPE_SRC,
  ORC_VAR_TYPE_DEST,
  ORC_VAR_TYPE_CONST,
  ORC_VAR_TYPE_PARAM,
  ORC_VAR_TYPE_ACCUMULATOR
} OrcVarType;
</ENUM>
<STRUCT>
<NAME>OrcVariable</NAME>
struct _OrcVariable {
  /*< private >*/
  char *name;
  char *type_name;

  int size;
  OrcVarType vartype;

  int used;
  int first_use;
  int last_use;
  int replaced;
  int replacement;

  int alloc;
  int is_chained;
  int is_aligned;
  int alignment;
  int is_uncached;

  orc_union64 value;

  int ptr_register;
  int ptr_offset;
  int mask_alloc;
  int aligned_data;
  int param_type;
  int load_dest;
  int update_type;
  int need_offset_reg;
  unsigned int flags;

  int has_parameter;
  int parameter;
};
</STRUCT>
<MACRO>
<NAME>orc_x86_emit_mov_imm_reg</NAME>
#define orc_x86_emit_mov_imm_reg(p,size,value,reg) \
  orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_mov_imm32_r, size, value, reg)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_mov_reg_reg</NAME>
#define orc_x86_emit_mov_reg_reg(p,size,src,dest) \
  orc_x86_emit_cpuinsn_size (p, ORC_X86_mov_r_rm, size, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_test_reg_reg</NAME>
#define orc_x86_emit_test_reg_reg(p,size,src,dest) \
  orc_x86_emit_cpuinsn_size (p, ORC_X86_test, size, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_sar_imm_reg</NAME>
#define orc_x86_emit_sar_imm_reg(p,size,value,reg) do { \
    if (value == 1) { \
      orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_sar, size, value, reg); \
    } else if (value > 1) { \
      orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_sar_imm, size, value, reg); \
    } \
  } while (0)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_and_imm_memoffset</NAME>
#define orc_x86_emit_and_imm_memoffset(p,size,value,offset,reg) \
  orc_x86_emit_cpuinsn_imm_memoffset (p, (value >= -128 && value < 128) ? \
      ORC_X86_and_imm8_rm : ORC_X86_and_imm32_rm, size, value, offset, reg)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_and_imm_reg</NAME>
#define orc_x86_emit_and_imm_reg(p,size,value,reg) do { \
  if ((value) >= -128 && (value) < 128) { \
    orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_and_imm8_rm, size, value, reg); \
  } else { \
    if ((reg) == X86_EAX) { \
      orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_and_imm32_a, size, value, reg); \
    } else { \
      orc_x86_emit_cpuinsn_imm_reg (p, ORC_X86_and_imm32_rm, size, value, reg); \
    } \
  } \
} while (0)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_add_imm_memoffset</NAME>
#define orc_x86_emit_add_imm_memoffset(p,size,value,offset,reg) \
  orc_x86_emit_cpuinsn_imm_memoffset (p, (value >= -128 && value < 128) ? \
      ORC_X86_add_imm8_rm : ORC_X86_add_imm32_rm, size, value, offset, reg)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_add_reg_memoffset</NAME>
#define orc_x86_emit_add_reg_memoffset(p,size,src,offset,dest) \
  orc_x86_emit_cpuinsn_reg_memoffset_s(p, ORC_X86_add_r_rm, size, src, offset, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_add_reg_reg</NAME>
#define orc_x86_emit_add_reg_reg(p,size,src,dest) \
  orc_x86_emit_cpuinsn_size(p, ORC_X86_add_r_rm, size, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_add_memoffset_reg</NAME>
#define orc_x86_emit_add_memoffset_reg(p,size,offset,src,dest) \
  orc_x86_emit_cpuinsn_memoffset_reg(p, ORC_X86_add_rm_r, size, offset, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_sub_reg_reg</NAME>
#define orc_x86_emit_sub_reg_reg(p,size,src,dest) \
  orc_x86_emit_cpuinsn_size(p, ORC_X86_sub_r_rm, size, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_sub_memoffset_reg</NAME>
#define orc_x86_emit_sub_memoffset_reg(p,size,offset,src,dest) \
  orc_x86_emit_cpuinsn_memoffset_reg(p, ORC_X86_sub_rm_r, size, offset, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_imul_memoffset_reg</NAME>
#define orc_x86_emit_imul_memoffset_reg(p,size,offset,src,dest) \
  orc_x86_emit_cpuinsn_memoffset_reg(p, ORC_X86_imul_rm_r, size, offset, src, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_cmp_reg_memoffset</NAME>
#define orc_x86_emit_cmp_reg_memoffset(p,size,src,offset,dest) \
  orc_x86_emit_cpuinsn_reg_memoffset_s(p, ORC_X86_cmp_r_rm, size, src, offset, dest)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_jmp</NAME>
#define orc_x86_emit_jmp(p,label) \
  orc_x86_emit_cpuinsn_branch (p, ORC_X86_jmp, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_jg</NAME>
#define orc_x86_emit_jg(p,label) \
  orc_x86_emit_cpuinsn_branch (p, ORC_X86_jg, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_jle</NAME>
#define orc_x86_emit_jle(p,label) \
  orc_x86_emit_cpuinsn_branch (p, ORC_X86_jle, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_je</NAME>
#define orc_x86_emit_je(p,label) \
  orc_x86_emit_cpuinsn_branch (p, ORC_X86_jz, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_jne</NAME>
#define orc_x86_emit_jne(p,label) \
  orc_x86_emit_cpuinsn_branch (p, ORC_X86_jnz, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_align</NAME>
#define orc_x86_emit_align(p,align_shift) \
  orc_x86_emit_cpuinsn_align (p, ORC_X86_ALIGN, align_shift)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_label</NAME>
#define orc_x86_emit_label(p,label) \
  orc_x86_emit_cpuinsn_label (p, ORC_X86_LABEL, label)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_emms</NAME>
#define orc_x86_emit_emms(p) \
  orc_x86_emit_cpuinsn_none (p, ORC_X86_emms)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_rdtsc</NAME>
#define orc_x86_emit_rdtsc(p) \
  orc_x86_emit_cpuinsn_none (p, ORC_X86_rdtsc)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_ret</NAME>
#define orc_x86_emit_ret(p) \
  orc_x86_emit_cpuinsn_none (p, ((p)->is_64bit) ? ORC_X86_retq : ORC_X86_ret)
</MACRO>
<MACRO>
<NAME>orc_x86_emit_test_imm_memoffset</NAME>
#define orc_x86_emit_test_imm_memoffset(p,size,value,offset,dest) \
  orc_x86_emit_cpuinsn_imm_memoffset (p, ORC_X86_test_imm, size, value, \
      offset, dest)
</MACRO>
<FUNCTION>
<NAME>x86_add_fixup</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned char *ptr, int label, int type
</FUNCTION>
<FUNCTION>
<NAME>x86_add_label</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, unsigned char *ptr, int label
</FUNCTION>
<FUNCTION>
<NAME>x86_add_label2</NAME>
<RETURNS>void</RETURNS>
OrcCompiler *compiler, int index, int label
</FUNCTION>
<ENUM>
<NAME>OrcX86InsnType</NAME>
typedef enum {
  ORC_X86_INSN_TYPE_MMXM_MMX,        	/* mem/mmx, mmx */
  ORC_X86_INSN_TYPE_IMM8_MMX_SHIFT,	/* $shift, mmx.  opcode in src */
  ORC_X86_INSN_TYPE_SSEM_SSE,		/* mem/mmx, sse */
  ORC_X86_INSN_TYPE_IMM8_MMXM_MMX,
  ORC_X86_INSN_TYPE_IMM8_MMX_REG_REV,
  ORC_X86_INSN_TYPE_MMXM_MMX_REV,
  ORC_X86_INSN_TYPE_SSEM_SSE_REV,
  ORC_X86_INSN_TYPE_REGM_MMX,
  ORC_X86_INSN_TYPE_MMX_REGM_REV,
  ORC_X86_INSN_TYPE_REGM,
  ORC_X86_INSN_TYPE_MEM,
  ORC_X86_INSN_TYPE_IMM8_REGM,
  ORC_X86_INSN_TYPE_IMM32_REGM,
  ORC_X86_INSN_TYPE_REGM_REG,
  ORC_X86_INSN_TYPE_REG_REGM,
  ORC_X86_INSN_TYPE_LABEL,
  ORC_X86_INSN_TYPE_ALIGN,
  ORC_X86_INSN_TYPE_BRANCH,
  ORC_X86_INSN_TYPE_NONE,
  ORC_X86_INSN_TYPE_STACK,
  ORC_X86_INSN_TYPE_IMM32_REGM_MOV,
  ORC_X86_INSN_TYPE_REG8_REGM,
  ORC_X86_INSN_TYPE_REG16_REGM,
  ORC_X86_INSN_TYPE_IMM32_A,
  ORC_X86_INSN_TYPE_IMM8_REGM_MMX,
} OrcX86InsnType;
</ENUM>
<ENUM>
<NAME>OrcX86Opcode</NAME>
typedef enum {
  ORC_X86_punpcklbw,
  ORC_X86_punpcklwd,
  ORC_X86_punpckldq,
  ORC_X86_packsswb,
  ORC_X86_pcmpgtb,
  ORC_X86_pcmpgtw,
  ORC_X86_pcmpgtd,
  ORC_X86_packuswb,
  ORC_X86_punpckhbw,
  ORC_X86_punpckhwd,
  ORC_X86_punpckhdq,
  ORC_X86_packssdw,
  ORC_X86_punpcklqdq,
  ORC_X86_punpckhqdq,
  ORC_X86_movdqa,
  ORC_X86_psraw,
  ORC_X86_psrlw,
  ORC_X86_psllw,
  ORC_X86_psrad,
  ORC_X86_psrld,
  ORC_X86_pslld,
  ORC_X86_psrlq,
  ORC_X86_psllq,
  ORC_X86_psrldq,
  ORC_X86_pslldq,
  ORC_X86_psrlq_reg,
  ORC_X86_pcmpeqb,
  ORC_X86_pcmpeqw,
  ORC_X86_pcmpeqd,
  ORC_X86_paddq,
  ORC_X86_pmullw,
  ORC_X86_psubusb,
  ORC_X86_psubusw,
  ORC_X86_pminub,
  ORC_X86_pand,
  ORC_X86_paddusb,
  ORC_X86_paddusw,
  ORC_X86_pmaxub,
  ORC_X86_pandn,
  ORC_X86_pavgb,
  ORC_X86_pavgw,
  ORC_X86_pmulhuw,
  ORC_X86_pmulhw,
  ORC_X86_psubsb,
  ORC_X86_psubsw,
  ORC_X86_pminsw,
  ORC_X86_por,
  ORC_X86_paddsb,
  ORC_X86_paddsw,
  ORC_X86_pmaxsw,
  ORC_X86_pxor,
  ORC_X86_pmuludq,
  ORC_X86_pmaddwd,
  ORC_X86_psadbw,
  ORC_X86_psubb,
  ORC_X86_psubw,
  ORC_X86_psubd,
  ORC_X86_psubq,
  ORC_X86_paddb,
  ORC_X86_paddw,
  ORC_X86_paddd,
  ORC_X86_pshufb,
  ORC_X86_phaddw,
  ORC_X86_phaddd,
  ORC_X86_phaddsw,
  ORC_X86_pmaddubsw,
  ORC_X86_phsubw,
  ORC_X86_phsubd,
  ORC_X86_phsubsw,
  ORC_X86_psignb,
  ORC_X86_psignw,
  ORC_X86_psignd,
  ORC_X86_pmulhrsw,
  ORC_X86_pabsb,
  ORC_X86_pabsw,
  ORC_X86_pabsd,
  ORC_X86_pmovsxbw,
  ORC_X86_pmovsxbd,
  ORC_X86_pmovsxbq,
  ORC_X86_pmovsxwd,
  ORC_X86_pmovsxwq,
  ORC_X86_pmovsxdq,
  ORC_X86_pmuldq,
  ORC_X86_pcmpeqq,
  ORC_X86_packusdw,
  ORC_X86_pmovzxbw,
  ORC_X86_pmovzxbd,
  ORC_X86_pmovzxbq,
  ORC_X86_pmovzxwd,
  ORC_X86_pmovzxwq,
  ORC_X86_pmovzxdq,
  ORC_X86_pmulld,
  ORC_X86_phminposuw,
  ORC_X86_pminsb,
  ORC_X86_pminsd,
  ORC_X86_pminuw,
  ORC_X86_pminud,
  ORC_X86_pmaxsb,
  ORC_X86_pmaxsd,
  ORC_X86_pmaxuw,
  ORC_X86_pmaxud,
  ORC_X86_pcmpgtq,
  ORC_X86_addps,
  ORC_X86_subps,
  ORC_X86_mulps,
  ORC_X86_divps,
  ORC_X86_sqrtps,
  ORC_X86_addpd,
  ORC_X86_subpd,
  ORC_X86_mulpd,
  ORC_X86_divpd,
  ORC_X86_sqrtpd,
  ORC_X86_cmpeqps,
  ORC_X86_cmpeqpd,
  ORC_X86_cmpltps,
  ORC_X86_cmpltpd,
  ORC_X86_cmpleps,
  ORC_X86_cmplepd,
  ORC_X86_cvttps2dq,
  ORC_X86_cvttpd2dq,
  ORC_X86_cvtdq2ps,
  ORC_X86_cvtdq2pd,
  ORC_X86_cvtps2pd,
  ORC_X86_cvtpd2ps,
  ORC_X86_minps,
  ORC_X86_minpd,
  ORC_X86_maxps,
  ORC_X86_maxpd,
  ORC_X86_psraw_imm,
  ORC_X86_psrlw_imm,
  ORC_X86_psllw_imm,
  ORC_X86_psrad_imm,
  ORC_X86_psrld_imm,
  ORC_X86_pslld_imm,
  ORC_X86_psrlq_imm,
  ORC_X86_psllq_imm,
  ORC_X86_psrldq_imm,
  ORC_X86_pslldq_imm,
  ORC_X86_pshufd,
  ORC_X86_pshuflw,
  ORC_X86_pshufhw,
  ORC_X86_palignr,
  ORC_X86_pinsrw,
  ORC_X86_movd_load,
  ORC_X86_movq_sse_load,
  ORC_X86_movdqa_load,
  ORC_X86_movdqu_load,
  ORC_X86_movhps_load,
  ORC_X86_pextrw,
  ORC_X86_movd_store,
  ORC_X86_movq_sse_store,
  ORC_X86_movdqa_store,
  ORC_X86_movdqu_store,
  ORC_X86_movntdq_store,
  ORC_X86_ldmxcsr,
  ORC_X86_stmxcsr,
  ORC_X86_add_imm8_rm,
  ORC_X86_add_imm32_rm,
  ORC_X86_add_rm_r,
  ORC_X86_add_r_rm,
  ORC_X86_or_imm8_rm,
  ORC_X86_or_imm32_rm,
  ORC_X86_or_rm_r,
  ORC_X86_or_r_rm,
  ORC_X86_adc_imm8_rm,
  ORC_X86_adc_imm32_rm,
  ORC_X86_adc_rm_r,
  ORC_X86_adc_r_rm,
  ORC_X86_sbb_imm8_rm,
  ORC_X86_sbb_imm32_rm,
  ORC_X86_sbb_rm_r,
  ORC_X86_sbb_r_rm,
  ORC_X86_and_imm8_rm,
  ORC_X86_and_imm32_rm,
  ORC_X86_and_rm_r,
  ORC_X86_and_r_rm,
  ORC_X86_sub_imm8_rm,
  ORC_X86_sub_imm32_rm,
  ORC_X86_sub_rm_r,
  ORC_X86_sub_r_rm,
  ORC_X86_xor_imm8_rm,
  ORC_X86_xor_imm32_rm,
  ORC_X86_xor_rm_r,
  ORC_X86_xor_r_rm,
  ORC_X86_cmp_imm8_rm,
  ORC_X86_cmp_imm32_rm,
  ORC_X86_cmp_rm_r,
  ORC_X86_cmp_r_rm,
  ORC_X86_jo,
  ORC_X86_jno,
  ORC_X86_jc,
  ORC_X86_jnc,
  ORC_X86_jz,
  ORC_X86_jnz,
  ORC_X86_jbe,
  ORC_X86_ja,
  ORC_X86_js,
  ORC_X86_jns,
  ORC_X86_jp,
  ORC_X86_jnp,
  ORC_X86_jl,
  ORC_X86_jge,
  ORC_X86_jle,
  ORC_X86_jg,
  ORC_X86_jmp,
  ORC_X86_LABEL,
  ORC_X86_ret,
  ORC_X86_retq,
  ORC_X86_emms,
  ORC_X86_rdtsc,
  ORC_X86_nop,
  ORC_X86_rep_movsb,
  ORC_X86_rep_movsw,
  ORC_X86_rep_movsl,
  ORC_X86_push,
  ORC_X86_pop,
  ORC_X86_movzx_rm_r,
  ORC_X86_movw_rm_r,
  ORC_X86_movl_rm_r,
  ORC_X86_mov_rm_r,
  ORC_X86_mov_imm32_r,
  ORC_X86_movb_r_rm,
  ORC_X86_movw_r_rm,
  ORC_X86_movl_r_rm,
  ORC_X86_mov_r_rm,
  ORC_X86_test,
  ORC_X86_test_imm,
  ORC_X86_leal,
  ORC_X86_leaq,
  ORC_X86_imul_rm_r,
  ORC_X86_imul_rm,
  ORC_X86_inc,
  ORC_X86_dec,
  ORC_X86_sar_imm,
  ORC_X86_sar,
  ORC_X86_and_imm32_a,
  ORC_X86_ALIGN,
  ORC_X86_pshufw,
  ORC_X86_movq_mmx_load,
  ORC_X86_movq_mmx_store,
  ORC_X86_endbr32,
  ORC_X86_endbr64,
} OrcX86Opcode;
</ENUM>
<STRUCT>
<NAME>OrcX86Insn</NAME>
struct _OrcX86Insn {
  OrcX86Opcode opcode_index;
  const OrcSysOpcode *opcode;
  int imm;
  int src;
  int dest;
  int size;
  int label;
  int type;
  int offset;
  int index_reg;
  int shift;
  int code_offset;
};
</STRUCT>
<MACRO>
<NAME>orc_sse_emit_punpcklbw</NAME>
#define orc_sse_emit_punpcklbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklbw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpcklwd</NAME>
#define orc_sse_emit_punpcklwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklwd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpckldq</NAME>
#define orc_sse_emit_punpckldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckldq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_packsswb</NAME>
#define orc_sse_emit_packsswb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packsswb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpgtb</NAME>
#define orc_sse_emit_pcmpgtb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpgtw</NAME>
#define orc_sse_emit_pcmpgtw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpgtd</NAME>
#define orc_sse_emit_pcmpgtd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_packuswb</NAME>
#define orc_sse_emit_packuswb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packuswb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpckhbw</NAME>
#define orc_sse_emit_punpckhbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhbw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpckhwd</NAME>
#define orc_sse_emit_punpckhwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhwd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpckhdq</NAME>
#define orc_sse_emit_punpckhdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhdq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_packssdw</NAME>
#define orc_sse_emit_packssdw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packssdw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpcklqdq</NAME>
#define orc_sse_emit_punpcklqdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklqdq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_punpckhqdq</NAME>
#define orc_sse_emit_punpckhqdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhqdq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqa</NAME>
#define orc_sse_emit_movdqa(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movdqa, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psraw</NAME>
#define orc_sse_emit_psraw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psraw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrlw</NAME>
#define orc_sse_emit_psrlw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psllw</NAME>
#define orc_sse_emit_psllw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psllw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrad</NAME>
#define orc_sse_emit_psrad(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrad, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrld</NAME>
#define orc_sse_emit_psrld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrld, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pslld</NAME>
#define orc_sse_emit_pslld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pslld, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrlq</NAME>
#define orc_sse_emit_psrlq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psllq</NAME>
#define orc_sse_emit_psllq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psllq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrldq</NAME>
#define orc_sse_emit_psrldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrldq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pslldq</NAME>
#define orc_sse_emit_pslldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pslldq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrlq_reg</NAME>
#define orc_sse_emit_psrlq_reg(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlq_reg, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpeqb</NAME>
#define orc_sse_emit_pcmpeqb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpeqw</NAME>
#define orc_sse_emit_pcmpeqw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpeqd</NAME>
#define orc_sse_emit_pcmpeqd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddq</NAME>
#define orc_sse_emit_paddq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmullw</NAME>
#define orc_sse_emit_pmullw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmullw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubusb</NAME>
#define orc_sse_emit_psubusb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubusb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubusw</NAME>
#define orc_sse_emit_psubusw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubusw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminub</NAME>
#define orc_sse_emit_pminub(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminub, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pand</NAME>
#define orc_sse_emit_pand(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pand, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddusb</NAME>
#define orc_sse_emit_paddusb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddusb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddusw</NAME>
#define orc_sse_emit_paddusw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddusw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxub</NAME>
#define orc_sse_emit_pmaxub(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxub, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pandn</NAME>
#define orc_sse_emit_pandn(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pandn, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pavgb</NAME>
#define orc_sse_emit_pavgb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pavgb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pavgw</NAME>
#define orc_sse_emit_pavgw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pavgw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmulhuw</NAME>
#define orc_sse_emit_pmulhuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhuw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmulhw</NAME>
#define orc_sse_emit_pmulhw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubsb</NAME>
#define orc_sse_emit_psubsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubsb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubsw</NAME>
#define orc_sse_emit_psubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminsw</NAME>
#define orc_sse_emit_pminsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_por</NAME>
#define orc_sse_emit_por(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_por, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddsb</NAME>
#define orc_sse_emit_paddsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddsb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddsw</NAME>
#define orc_sse_emit_paddsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxsw</NAME>
#define orc_sse_emit_pmaxsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pxor</NAME>
#define orc_sse_emit_pxor(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pxor, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmuludq</NAME>
#define orc_sse_emit_pmuludq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmuludq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaddwd</NAME>
#define orc_sse_emit_pmaddwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaddwd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psadbw</NAME>
#define orc_sse_emit_psadbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psadbw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubb</NAME>
#define orc_sse_emit_psubb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubw</NAME>
#define orc_sse_emit_psubw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubd</NAME>
#define orc_sse_emit_psubd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psubq</NAME>
#define orc_sse_emit_psubq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddb</NAME>
#define orc_sse_emit_paddb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddw</NAME>
#define orc_sse_emit_paddw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_paddd</NAME>
#define orc_sse_emit_paddd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pshufb</NAME>
#define orc_sse_emit_pshufb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pshufb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phaddw</NAME>
#define orc_sse_emit_phaddw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phaddd</NAME>
#define orc_sse_emit_phaddd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phaddsw</NAME>
#define orc_sse_emit_phaddsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaddubsw</NAME>
#define orc_sse_emit_pmaddubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaddubsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phsubw</NAME>
#define orc_sse_emit_phsubw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phsubd</NAME>
#define orc_sse_emit_phsubd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phsubsw</NAME>
#define orc_sse_emit_phsubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psignb</NAME>
#define orc_sse_emit_psignb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psignw</NAME>
#define orc_sse_emit_psignw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psignd</NAME>
#define orc_sse_emit_psignd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmulhrsw</NAME>
#define orc_sse_emit_pmulhrsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhrsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pabsb</NAME>
#define orc_sse_emit_pabsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pabsw</NAME>
#define orc_sse_emit_pabsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pabsd</NAME>
#define orc_sse_emit_pabsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxbw</NAME>
#define orc_sse_emit_pmovsxbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxbd</NAME>
#define orc_sse_emit_pmovsxbd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxbq</NAME>
#define orc_sse_emit_pmovsxbq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxwd</NAME>
#define orc_sse_emit_pmovsxwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxwd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxwq</NAME>
#define orc_sse_emit_pmovsxwq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxwq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovsxdq</NAME>
#define orc_sse_emit_pmovsxdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxdq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmuldq</NAME>
#define orc_sse_emit_pmuldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmuldq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpeqq</NAME>
#define orc_sse_emit_pcmpeqq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_packusdw</NAME>
#define orc_sse_emit_packusdw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packusdw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxbw</NAME>
#define orc_sse_emit_pmovzxbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxbd</NAME>
#define orc_sse_emit_pmovzxbd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxbq</NAME>
#define orc_sse_emit_pmovzxbq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxwd</NAME>
#define orc_sse_emit_pmovzxwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxwd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxwq</NAME>
#define orc_sse_emit_pmovzxwq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxwq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmovzxdq</NAME>
#define orc_sse_emit_pmovzxdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxdq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmulld</NAME>
#define orc_sse_emit_pmulld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulld, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_phminposuw</NAME>
#define orc_sse_emit_phminposuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phminposuw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminsb</NAME>
#define orc_sse_emit_pminsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminsd</NAME>
#define orc_sse_emit_pminsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminuw</NAME>
#define orc_sse_emit_pminuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminuw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pminud</NAME>
#define orc_sse_emit_pminud(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminud, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxsb</NAME>
#define orc_sse_emit_pmaxsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsb, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxsd</NAME>
#define orc_sse_emit_pmaxsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxuw</NAME>
#define orc_sse_emit_pmaxuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxuw, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pmaxud</NAME>
#define orc_sse_emit_pmaxud(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxud, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pcmpgtq</NAME>
#define orc_sse_emit_pcmpgtq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_addps</NAME>
#define orc_sse_emit_addps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_addps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_subps</NAME>
#define orc_sse_emit_subps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_subps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_mulps</NAME>
#define orc_sse_emit_mulps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_mulps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_divps</NAME>
#define orc_sse_emit_divps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_divps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_sqrtps</NAME>
#define orc_sse_emit_sqrtps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_sqrtps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_addpd</NAME>
#define orc_sse_emit_addpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_addpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_subpd</NAME>
#define orc_sse_emit_subpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_subpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_mulpd</NAME>
#define orc_sse_emit_mulpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_mulpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_divpd</NAME>
#define orc_sse_emit_divpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_divpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_sqrtpd</NAME>
#define orc_sse_emit_sqrtpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_sqrtpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmpeqps</NAME>
#define orc_sse_emit_cmpeqps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpeqps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmpeqpd</NAME>
#define orc_sse_emit_cmpeqpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpeqpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmpltps</NAME>
#define orc_sse_emit_cmpltps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpltps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmpltpd</NAME>
#define orc_sse_emit_cmpltpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpltpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmpleps</NAME>
#define orc_sse_emit_cmpleps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpleps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cmplepd</NAME>
#define orc_sse_emit_cmplepd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmplepd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvttps2dq</NAME>
#define orc_sse_emit_cvttps2dq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvttps2dq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvttpd2dq</NAME>
#define orc_sse_emit_cvttpd2dq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvttpd2dq, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvtdq2ps</NAME>
#define orc_sse_emit_cvtdq2ps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtdq2ps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvtdq2pd</NAME>
#define orc_sse_emit_cvtdq2pd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtdq2pd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvtps2pd</NAME>
#define orc_sse_emit_cvtps2pd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtps2pd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_cvtpd2ps</NAME>
#define orc_sse_emit_cvtpd2ps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtpd2ps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_minps</NAME>
#define orc_sse_emit_minps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_minps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_minpd</NAME>
#define orc_sse_emit_minpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_minpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_maxps</NAME>
#define orc_sse_emit_maxps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_maxps, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_maxpd</NAME>
#define orc_sse_emit_maxpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_maxpd, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psraw_imm</NAME>
#define orc_sse_emit_psraw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psraw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrlw_imm</NAME>
#define orc_sse_emit_psrlw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrlw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psllw_imm</NAME>
#define orc_sse_emit_psllw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psllw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrad_imm</NAME>
#define orc_sse_emit_psrad_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrad_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrld_imm</NAME>
#define orc_sse_emit_psrld_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrld_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pslld_imm</NAME>
#define orc_sse_emit_pslld_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pslld_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrlq_imm</NAME>
#define orc_sse_emit_psrlq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrlq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psllq_imm</NAME>
#define orc_sse_emit_psllq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psllq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_psrldq_imm</NAME>
#define orc_sse_emit_psrldq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrldq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pslldq_imm</NAME>
#define orc_sse_emit_pslldq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pslldq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pshufd</NAME>
#define orc_sse_emit_pshufd(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshufd, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pshuflw</NAME>
#define orc_sse_emit_pshuflw(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshuflw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pshufhw</NAME>
#define orc_sse_emit_pshufhw(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshufhw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_palignr</NAME>
#define orc_sse_emit_palignr(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psalignr, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqu</NAME>
#define orc_sse_emit_movdqu(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movdqu_load, 16, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pinsrw_memoffset</NAME>
#define orc_sse_emit_pinsrw_memoffset(p,imm,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_pinsrw, 4, imm, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_load_memoffset</NAME>
#define orc_sse_emit_movd_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movd_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_load_memoffset</NAME>
#define orc_sse_emit_movq_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movq_sse_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqa_load_memoffset</NAME>
#define orc_sse_emit_movdqa_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movdqa_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqu_load_memoffset</NAME>
#define orc_sse_emit_movdqu_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movdqu_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movhps_load_memoffset</NAME>
#define orc_sse_emit_movhps_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movhps_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pextrw_memoffset</NAME>
#define orc_sse_emit_pextrw_memoffset(p,imm,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_pextrw, 16, imm, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_store_memoffset</NAME>
#define orc_sse_emit_movd_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movd_store, 16, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_store_memoffset</NAME>
#define orc_sse_emit_movq_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movq_sse_store, 16, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqa_store_memoffset</NAME>
#define orc_sse_emit_movdqa_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movdqa_store, 16, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqu_store_memoffset</NAME>
#define orc_sse_emit_movdqu_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movdqu_store, 16, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movntdq_store_memoffset</NAME>
#define orc_sse_emit_movntdq_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movntdq_store, 16, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pinsrw_memindex</NAME>
#define orc_sse_emit_pinsrw_memindex(p,imm,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_pinsrw, 4, imm, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_load_memindex</NAME>
#define orc_sse_emit_movd_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movd_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_load_memindex</NAME>
#define orc_sse_emit_movq_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movq_sse_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqa_load_memindex</NAME>
#define orc_sse_emit_movdqa_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movdqa_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqu_load_memindex</NAME>
#define orc_sse_emit_movdqu_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movdqu_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movhps_load_memindex</NAME>
#define orc_sse_emit_movhps_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movhps_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pextrw_memindex</NAME>
#define orc_sse_emit_pextrw_memindex(p,imm,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_pextrw, imm, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_store_memindex</NAME>
#define orc_sse_emit_movd_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movd_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_store_memindex</NAME>
#define orc_sse_emit_movq_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movq_sse_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqa_store_memindex</NAME>
#define orc_sse_emit_movdqa_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movdqa_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movdqu_store_memindex</NAME>
#define orc_sse_emit_movdqu_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movdqu_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movntdq_store_memindex</NAME>
#define orc_sse_emit_movntdq_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movntdq_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pinsrw_register</NAME>
#define orc_sse_emit_pinsrw_register(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pinsrw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_load_register</NAME>
#define orc_sse_emit_movd_load_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movd_load, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_load_register</NAME>
#define orc_sse_emit_movq_load_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movq_sse_load, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_pextrw_register</NAME>
#define orc_sse_emit_pextrw_register(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pextrw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movd_store_register</NAME>
#define orc_sse_emit_movd_store_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movd_store, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_sse_emit_movq_store_register</NAME>
#define orc_sse_emit_movq_store_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movq_sse_store, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpcklbw</NAME>
#define orc_mmx_emit_punpcklbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklbw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpcklwd</NAME>
#define orc_mmx_emit_punpcklwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklwd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpckldq</NAME>
#define orc_mmx_emit_punpckldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckldq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_packsswb</NAME>
#define orc_mmx_emit_packsswb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packsswb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpgtb</NAME>
#define orc_mmx_emit_pcmpgtb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpgtw</NAME>
#define orc_mmx_emit_pcmpgtw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpgtd</NAME>
#define orc_mmx_emit_pcmpgtd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_packuswb</NAME>
#define orc_mmx_emit_packuswb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packuswb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpckhbw</NAME>
#define orc_mmx_emit_punpckhbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhbw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpckhwd</NAME>
#define orc_mmx_emit_punpckhwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhwd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpckhdq</NAME>
#define orc_mmx_emit_punpckhdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhdq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_packssdw</NAME>
#define orc_mmx_emit_packssdw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packssdw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpcklqdq</NAME>
#define orc_mmx_emit_punpcklqdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpcklqdq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_punpckhqdq</NAME>
#define orc_mmx_emit_punpckhqdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_punpckhqdq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psraw</NAME>
#define orc_mmx_emit_psraw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psraw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrlw</NAME>
#define orc_mmx_emit_psrlw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psllw</NAME>
#define orc_mmx_emit_psllw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psllw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrad</NAME>
#define orc_mmx_emit_psrad(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrad, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrld</NAME>
#define orc_mmx_emit_psrld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrld, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pslld</NAME>
#define orc_mmx_emit_pslld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pslld, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrlq</NAME>
#define orc_mmx_emit_psrlq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psllq</NAME>
#define orc_mmx_emit_psllq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psllq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrldq</NAME>
#define orc_mmx_emit_psrldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrldq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pslldq</NAME>
#define orc_mmx_emit_pslldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pslldq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrlq_reg</NAME>
#define orc_mmx_emit_psrlq_reg(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psrlq_reg, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpeqb</NAME>
#define orc_mmx_emit_pcmpeqb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpeqw</NAME>
#define orc_mmx_emit_pcmpeqw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpeqd</NAME>
#define orc_mmx_emit_pcmpeqd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddq</NAME>
#define orc_mmx_emit_paddq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmullw</NAME>
#define orc_mmx_emit_pmullw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmullw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubusb</NAME>
#define orc_mmx_emit_psubusb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubusb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubusw</NAME>
#define orc_mmx_emit_psubusw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubusw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminub</NAME>
#define orc_mmx_emit_pminub(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminub, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pand</NAME>
#define orc_mmx_emit_pand(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pand, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddusb</NAME>
#define orc_mmx_emit_paddusb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddusb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddusw</NAME>
#define orc_mmx_emit_paddusw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddusw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxub</NAME>
#define orc_mmx_emit_pmaxub(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxub, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pandn</NAME>
#define orc_mmx_emit_pandn(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pandn, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pavgb</NAME>
#define orc_mmx_emit_pavgb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pavgb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pavgw</NAME>
#define orc_mmx_emit_pavgw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pavgw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmulhuw</NAME>
#define orc_mmx_emit_pmulhuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhuw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmulhw</NAME>
#define orc_mmx_emit_pmulhw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubsb</NAME>
#define orc_mmx_emit_psubsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubsb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubsw</NAME>
#define orc_mmx_emit_psubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminsw</NAME>
#define orc_mmx_emit_pminsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_por</NAME>
#define orc_mmx_emit_por(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_por, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddsb</NAME>
#define orc_mmx_emit_paddsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddsb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddsw</NAME>
#define orc_mmx_emit_paddsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxsw</NAME>
#define orc_mmx_emit_pmaxsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pxor</NAME>
#define orc_mmx_emit_pxor(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pxor, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmuludq</NAME>
#define orc_mmx_emit_pmuludq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmuludq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaddwd</NAME>
#define orc_mmx_emit_pmaddwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaddwd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psadbw</NAME>
#define orc_mmx_emit_psadbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psadbw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubb</NAME>
#define orc_mmx_emit_psubb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubw</NAME>
#define orc_mmx_emit_psubw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubd</NAME>
#define orc_mmx_emit_psubd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psubq</NAME>
#define orc_mmx_emit_psubq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psubq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddb</NAME>
#define orc_mmx_emit_paddb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddw</NAME>
#define orc_mmx_emit_paddw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_paddd</NAME>
#define orc_mmx_emit_paddd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_paddd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pshufb</NAME>
#define orc_mmx_emit_pshufb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pshufb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phaddw</NAME>
#define orc_mmx_emit_phaddw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phaddd</NAME>
#define orc_mmx_emit_phaddd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phaddsw</NAME>
#define orc_mmx_emit_phaddsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phaddsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaddubsw</NAME>
#define orc_mmx_emit_pmaddubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaddubsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phsubw</NAME>
#define orc_mmx_emit_phsubw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phsubd</NAME>
#define orc_mmx_emit_phsubd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phsubsw</NAME>
#define orc_mmx_emit_phsubsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phsubsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psignb</NAME>
#define orc_mmx_emit_psignb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psignw</NAME>
#define orc_mmx_emit_psignw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psignd</NAME>
#define orc_mmx_emit_psignd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_psignd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmulhrsw</NAME>
#define orc_mmx_emit_pmulhrsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulhrsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pabsb</NAME>
#define orc_mmx_emit_pabsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pabsw</NAME>
#define orc_mmx_emit_pabsw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pabsd</NAME>
#define orc_mmx_emit_pabsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pabsd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxbw</NAME>
#define orc_mmx_emit_pmovsxbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxbd</NAME>
#define orc_mmx_emit_pmovsxbd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxbq</NAME>
#define orc_mmx_emit_pmovsxbq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxbq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxwd</NAME>
#define orc_mmx_emit_pmovsxwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxwd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxwq</NAME>
#define orc_mmx_emit_pmovsxwq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxwq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovsxdq</NAME>
#define orc_mmx_emit_pmovsxdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovsxdq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmuldq</NAME>
#define orc_mmx_emit_pmuldq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmuldq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpeqq</NAME>
#define orc_mmx_emit_pcmpeqq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpeqq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_packusdw</NAME>
#define orc_mmx_emit_packusdw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_packusdw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxbw</NAME>
#define orc_mmx_emit_pmovzxbw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxbd</NAME>
#define orc_mmx_emit_pmovzxbd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxbq</NAME>
#define orc_mmx_emit_pmovzxbq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxbq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxwd</NAME>
#define orc_mmx_emit_pmovzxwd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxwd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxwq</NAME>
#define orc_mmx_emit_pmovzxwq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxwq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmovzxdq</NAME>
#define orc_mmx_emit_pmovzxdq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmovzxdq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmulld</NAME>
#define orc_mmx_emit_pmulld(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmulld, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_phminposuw</NAME>
#define orc_mmx_emit_phminposuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_phminposuw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminsb</NAME>
#define orc_mmx_emit_pminsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminsd</NAME>
#define orc_mmx_emit_pminsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminsd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminuw</NAME>
#define orc_mmx_emit_pminuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminuw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pminud</NAME>
#define orc_mmx_emit_pminud(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pminud, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxsb</NAME>
#define orc_mmx_emit_pmaxsb(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsb, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxsd</NAME>
#define orc_mmx_emit_pmaxsd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxsd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxuw</NAME>
#define orc_mmx_emit_pmaxuw(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxuw, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pmaxud</NAME>
#define orc_mmx_emit_pmaxud(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pmaxud, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pcmpgtq</NAME>
#define orc_mmx_emit_pcmpgtq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_pcmpgtq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_addps</NAME>
#define orc_mmx_emit_addps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_addps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_subps</NAME>
#define orc_mmx_emit_subps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_subps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_mulps</NAME>
#define orc_mmx_emit_mulps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_mulps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_divps</NAME>
#define orc_mmx_emit_divps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_divps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_sqrtps</NAME>
#define orc_mmx_emit_sqrtps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_sqrtps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_addpd</NAME>
#define orc_mmx_emit_addpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_addpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_subpd</NAME>
#define orc_mmx_emit_subpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_subpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_mulpd</NAME>
#define orc_mmx_emit_mulpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_mulpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_divpd</NAME>
#define orc_mmx_emit_divpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_divpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_sqrtpd</NAME>
#define orc_mmx_emit_sqrtpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_sqrtpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmpeqps</NAME>
#define orc_mmx_emit_cmpeqps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpeqps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmpeqpd</NAME>
#define orc_mmx_emit_cmpeqpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpeqpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmpltps</NAME>
#define orc_mmx_emit_cmpltps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpltps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmpltpd</NAME>
#define orc_mmx_emit_cmpltpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpltpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmpleps</NAME>
#define orc_mmx_emit_cmpleps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmpleps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cmplepd</NAME>
#define orc_mmx_emit_cmplepd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cmplepd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvttps2dq</NAME>
#define orc_mmx_emit_cvttps2dq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvttps2dq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvttpd2dq</NAME>
#define orc_mmx_emit_cvttpd2dq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvttpd2dq, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvtdq2ps</NAME>
#define orc_mmx_emit_cvtdq2ps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtdq2ps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvtdq2pd</NAME>
#define orc_mmx_emit_cvtdq2pd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtdq2pd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvtps2pd</NAME>
#define orc_mmx_emit_cvtps2pd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtps2pd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_cvtpd2ps</NAME>
#define orc_mmx_emit_cvtpd2ps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_cvtpd2ps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_minps</NAME>
#define orc_mmx_emit_minps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_minps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_minpd</NAME>
#define orc_mmx_emit_minpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_minpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_maxps</NAME>
#define orc_mmx_emit_maxps(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_maxps, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_maxpd</NAME>
#define orc_mmx_emit_maxpd(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_maxpd, 8, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psraw_imm</NAME>
#define orc_mmx_emit_psraw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psraw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrlw_imm</NAME>
#define orc_mmx_emit_psrlw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrlw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psllw_imm</NAME>
#define orc_mmx_emit_psllw_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psllw_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrad_imm</NAME>
#define orc_mmx_emit_psrad_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrad_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrld_imm</NAME>
#define orc_mmx_emit_psrld_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrld_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pslld_imm</NAME>
#define orc_mmx_emit_pslld_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pslld_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrlq_imm</NAME>
#define orc_mmx_emit_psrlq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrlq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psllq_imm</NAME>
#define orc_mmx_emit_psllq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psllq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_psrldq_imm</NAME>
#define orc_mmx_emit_psrldq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psrldq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pslldq_imm</NAME>
#define orc_mmx_emit_pslldq_imm(p,imm,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pslldq_imm, imm, 0, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pshufd</NAME>
#define orc_mmx_emit_pshufd(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshufd, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pshuflw</NAME>
#define orc_mmx_emit_pshuflw(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshuflw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pshufhw</NAME>
#define orc_mmx_emit_pshufhw(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshufhw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_palignr</NAME>
#define orc_mmx_emit_palignr(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_psalignr, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pinsrw_memoffset</NAME>
#define orc_mmx_emit_pinsrw_memoffset(p,imm,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_pinsrw, 4, imm, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_load_memoffset</NAME>
#define orc_mmx_emit_movd_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movd_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_load_memoffset</NAME>
#define orc_mmx_emit_movq_load_memoffset(p,offset,a,b) orc_x86_emit_cpuinsn_load_memoffset(p, ORC_X86_movq_mmx_load, 4, 0, offset, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pextrw_memoffset</NAME>
#define orc_mmx_emit_pextrw_memoffset(p,imm,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_pextrw, 8, imm, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_store_memoffset</NAME>
#define orc_mmx_emit_movd_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movd_store, 8, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_store_memoffset</NAME>
#define orc_mmx_emit_movq_store_memoffset(p,a,offset,b) orc_x86_emit_cpuinsn_store_memoffset(p, ORC_X86_movq_mmx_store, 8, 0, a, offset, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pinsrw_memindex</NAME>
#define orc_mmx_emit_pinsrw_memindex(p,imm,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_pinsrw, 4, imm, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_load_memindex</NAME>
#define orc_mmx_emit_movd_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movd_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_load_memindex</NAME>
#define orc_mmx_emit_movq_load_memindex(p,offset,a,a_index,shift,b) orc_x86_emit_cpuinsn_load_memindex(p, ORC_X86_movq_mmx_load, 4, 0, offset, a, a_index, shift, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pextrw_memindex</NAME>
#define orc_mmx_emit_pextrw_memindex(p,imm,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_pextrw, imm, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_store_memindex</NAME>
#define orc_mmx_emit_movd_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movd_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_store_memindex</NAME>
#define orc_mmx_emit_movq_store_memindex(p,a,offset,b,b_index,shift) orc_x86_emit_cpuinsn_store_memindex(p, ORC_X86_movq_mmx_store, 0, a, offset, b, b_index, shift)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pinsrw_register</NAME>
#define orc_mmx_emit_pinsrw_register(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pinsrw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_load_register</NAME>
#define orc_mmx_emit_movd_load_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movd_load, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_load_register</NAME>
#define orc_mmx_emit_movq_load_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movq_mmx_load, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pextrw_register</NAME>
#define orc_mmx_emit_pextrw_register(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pextrw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movd_store_register</NAME>
#define orc_mmx_emit_movd_store_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movd_store, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq_store_register</NAME>
#define orc_mmx_emit_movq_store_register(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movq_mmx_store, 4, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_pshufw</NAME>
#define orc_mmx_emit_pshufw(p,imm,a,b) orc_x86_emit_cpuinsn_imm(p, ORC_X86_pshufw, imm, a, b)
</MACRO>
<MACRO>
<NAME>orc_mmx_emit_movq</NAME>
#define orc_mmx_emit_movq(p,a,b) orc_x86_emit_cpuinsn_size(p, ORC_X86_movq_mmx_load, 8, a, b)
</MACRO>
